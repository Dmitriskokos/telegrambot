import logging
import asyncio
import os
from decimal import Decimal
import random
import time
import uuid
from aiogram import Bot, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile, InputMediaPhoto
from database import (
    get_user,
    get_wallet_address,
    set_user_balance,
    update_referral_purchases_amount,
    get_product_category,
    get_product_price,
    get_location_info_from_paid_products,
    move_paid_product_to_sold_products,
    add_to_user_balance,
    add_referral_reward,
    update_order_status,
    update_referral_purchases_count_column
)
from datetime import datetime, timedelta

from handlers import shared_context
from .otstuk import send_order_notification
import re
from keyboards import main_menu_keyboard
import handlers  # <--- ADD THIS IMPORT

from handlers.card_checker import start_payment_check # <----- –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç—Å—é–¥–∞
# from handlers.payment_handler import process_bot_balance_purchase <--- –£–±—Ä–∞–ª –∏–º–ø–æ—Ä—Ç
logging.basicConfig(level=logging.INFO)
CHECK_INTERVAL = 30

async def process_card_payment(message: Message, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã –†—É–±–ª—è–º–∏."""
    user_id = message.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - card.py - process_card_payment: User {user_id}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂
    if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context and handlers.shared_context.user_context[user_id].get("payment_status") == "pending":
            logging.info(f"{log_id} - card.py - process_card_payment: payment_status is pending - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
            await bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. \n\n You already have an incomplete order")
            return

    user_context = handlers.shared_context.user_context.get(user_id, {})
    product_id = user_context.get("selected_product_id")
    product_price = Decimal(str(user_context.get("selected_product_price")))
    amount_with_cents = user_context.get("amount_with_cents")
    
    if amount_with_cents:
        payment_amount = amount_with_cents
    else:
        import random
        random_cents = Decimal(str(round(random.uniform(0.01, 0.99), 2)))
        payment_amount = (product_price + random_cents).quantize(Decimal("0.00"))

    handlers.shared_context.user_context[user_id]["payment_method"] = "CARD"
    handlers.shared_context.user_context[user_id]["amount"] = payment_amount
    handlers.shared_context.user_context[user_id]["product_name"] = user_context.get("product_name")
    handlers.shared_context.user_context[user_id]["category_name"] = user_context.get("selected_category")
    handlers.shared_context.user_context[user_id]["selected_product"] = {
        "name": user_context.get("product_name"),
        "category": user_context.get("selected_category"),
        "id": product_id
    }
    handlers.shared_context.user_context[user_id]["selected_product_price"] = product_price
    handlers.shared_context.user_context[user_id]["payment_id"] = f"card_payment_{uuid.uuid4()}"
    handlers.shared_context.user_context[user_id]["amount_with_cents"] = payment_amount
    handlers.shared_context.user_context[user_id]["paid_products_table"] = user_context.get("selected_table")

    usdt_trc20_wallet = get_wallet_address('USDT_TRC20')
    if not usdt_trc20_wallet:
        logging.error(f"{log_id} - card.py - process_card_payment: USDT TRC20 wallet not found.")
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ USDT TRC20. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    payment_message = (
        "üòé <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ</b>\n\n"
        "  1. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–¥–µ–∂–Ω–æ–º—É –æ–±–º–µ–Ω–Ω–∏–∫—É @honey_change\n\n"
        f"  2. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –æ–±–º–µ–Ω—è—Ç—å —Ä—É–±–ª–∏ –Ω–∞ USDT\n"
        f"      –°—É–º–º–∞: <code>{payment_amount}</code> (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)\n\n"
        f"  3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ USDT –Ω–∞ –∫–æ—à–µ–ª—ë–∫:\n"
        f"      <code>{usdt_trc20_wallet}</code> (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)\n\n"
        "  4. –í–∞–º –≤—ã–¥–∞–¥—É—Ç –∫–∞—Ä—Ç—É, –∫—É–¥–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä—É–±–ª–∏.\n\n"
        "  5. –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –•–∞–Ω–∏ –ú–∞–Ω–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥,\n"
        "      –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - <b>–û–ü–õ–ê–¢–ò–õ</b>.\n"
    )

    support_chat_link = "https://t.me/thai_hub_supp"
    payment_confirmation_keyboard = ReplyKeyboardMarkup(
        resize_keyboard=True,
        keyboard=[
            [KeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª / Paid")],
            [KeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è / Cancel")],
            [KeyboardButton(text="–°–ê–ü–ü–û–†–¢ / SUPPORT", url=support_chat_link)],
        ]
    )

    await message.answer(payment_message, reply_markup=payment_confirmation_keyboard, parse_mode="HTML")

    
async def _create_and_process_order(message: Message, bot: Bot, payment_method: str):
        """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞."""
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π payment_id (UUID)
        payment_uuid = handlers.shared_context.user_context[user_id].get("payment_id")
        amount = handlers.shared_context.user_context[user_id].get("amount", "unknown")
        product_name = handlers.shared_context.user_context[user_id].get("product_name", "unknown")
        category_name = handlers.shared_context.user_context[user_id].get("category_name", "unknown")
        product_id = handlers.shared_context.user_context[user_id].get("selected_product_id")

        amount_with_cents = handlers.shared_context.user_context[user_id].get("amount_with_cents", "unknown")

        crypto_amount = handlers.shared_context.user_context[user_id].get("crypto_amount")
        user_obj = await bot.get_chat(user_id)
        username = user_obj.username if user_obj.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'


        logging.info(
            f"{log_id} - card.py - _create_and_process_order: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä")
        new_order = {
            "id": str(uuid.uuid4()),  # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º id –∑–∞–∫–∞–∑–∞
            "user_id": user_id,
            "product_name": product_name,
            "category": category_name,
            "amount": float(amount) if amount != "unknown" else None,  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ float
            "payment_id": payment_uuid,
            "status": "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if payment_method != "BALANCE" else "–í—ã–ø–æ–ª–Ω–µ–Ω",
            "city": handlers.shared_context.user_context[user_id].get("selected_city"),
            "district": handlers.shared_context.user_context[user_id].get("selected_district"),
            "crypto_amount": crypto_amount,
            "product_id": int(product_id) if product_id else None,
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è balance
        if payment_method == "BALANCE":
            new_order["paid_products_table"] = handlers.shared_context.user_context[user_id].get("paid_products_table")

        from database import add_order
        add_order(new_order)
        logging.info(
            f"{log_id} - card.py - {'paid_handler' if payment_method != 'BALANCE' else 'paid_balance_handler'}: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä {new_order} –¥–ª—è –æ–ø–ª–∞—Ç—ã")
        
        text = (
            "‚úÖ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!</b>\n\n"
            f"    –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>{amount}</code> \n\n"
            "    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –æ—Ç –≤–∞—Å –æ–ø–ª–∞—Ç—É,\n"
            "    –≤–∞–º –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò, –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä."
        )
            # text = escape_markdown(text)  # –¢–µ–ø–µ—Ä—å –±–µ–∑ –ª–∏—à–Ω–∏—Ö –∑–∞–º–µ–Ω - Removed escaping here
        await message.answer(
                text,
                reply_markup = main_menu_keyboard(), parse_mode='HTML'
        )

        try:
            usdt_trc20_wallet = get_wallet_address('USDT_TRC20')
            await send_order_notification(
            bot=bot,
            user_id=user_id,
            log_id=log_id,
            username=username,
            product_name=product_name,
            category_name=category_name,
            amount=amount,
            order_id=new_order.get("id"),
            status="–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
            payment_method=payment_method,
            wallet_address=usdt_trc20_wallet if usdt_trc20_wallet else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
            order_text=text, # <--- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å—Ç—É–∫–∞
            order_media=None # <---- –ø–µ—Ä–µ–¥–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç—É –º–µ–¥–∏–∞
                )
        except Exception as e:
             logging.error(f"card.py - _create_and_process_order: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

        if payment_method == "CARD":
           start_payment_check(message, bot, new_order) #  <---- –≤—ã–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —á–µ–∫–µ—Ä
        # elif payment_method == "BALANCE":  <---  —É–±–∏—Ä–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–æ—Ü–µ—Å—Å –æ–ø–ª–∞—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞ –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ –Ω–µ –¥–µ–ª–∞–µ–º
        #     await process_bot_balance_purchase(message, bot, new_order)

async def start_card_payment_check(message: Message, bot: Bot, order: dict):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    payment_id = order.get("payment_id")
    amount = Decimal(str(order.get("amount")))  # Decimal
    user_id = message.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"card.py - start_card_payment_check: User {user_id}, Payment ID: {payment_id}, Amount: {amount}")

    if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context:
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        task = handlers.shared_context.user_context[user_id].get("payment_task")
        if task:
            task.cancel()
            logging.info(f"card.py - start_card_payment_check: –û—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π payment_task –¥–ª—è user {user_id}")
        handlers.shared_context.user_context[user_id]["payment_status"] = "pending"
    else:
        logging.warning(f"card.py - start_card_payment_check: user_context not found for user_id: {user_id}")
    
    now = datetime.now()
    last_checked_time = now - timedelta(hours=1)
    task = asyncio.create_task(_check_card_payment_task(message, bot, order, last_checked_time, log_id))
    
    if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context:
        handlers.shared_context.user_context[user_id]["payment_task"] = task
     # Immediate return to the main menu
    asyncio.create_task(bot.send_message(message.chat.id, "–û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã... \n\n Waiting for payment confirmation...", reply_markup=main_menu_keyboard()))


async def _check_card_payment_task(message: Message, bot: Bot, order: dict, last_hour: datetime, log_id: uuid.UUID):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –æ—Ç–º–µ–Ω–æ–π —Ç–∞—Å–∫–∞."""
    try:
        await check_card_payment(message, bot, order, last_hour, log_id)
    except asyncio.CancelledError:
        logging.info(f"card.py - _check_card_payment_task: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {order.get('payment_id')} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(
            f"card.py - _check_card_payment_task: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ _check_card_payment_task: {e}"
        )
    finally:
        if handlers.shared_context.user_context and message.from_user.id in handlers.shared_context.user_context:
            task = handlers.shared_context.user_context[message.from_user.id].get("payment_task")
            if task:
                task.cancel()
                logging.info(
                    f"card.py - _check_card_payment_task: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {order.get('payment_id')} –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
            handlers.shared_context.user_context[message.from_user.id].pop("payment_task", None)
            logging.info(
                f"card.py - _check_card_payment_task: payment_task —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}."
            )

async def check_card_payment(message: Message, bot: Bot, order: dict, last_hour: datetime, log_id: uuid.UUID):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π."""
    payment_id = order.get("payment_id")
    amount_decimal = Decimal(str(order.get("amount")))
    user_id = message.from_user.id
    order_id = order.get("id")

    logging.info(f"{log_id} - card.py - check_card_payment: –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, Order: {order}")
    start_time = time.time()

    try:
        while time.time() - start_time < 1800:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
            try:
                if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context and handlers.shared_context.user_context[user_id].get("payment_status") == "completed":
                    logging.info(f"{log_id} - card.py - check_card_payment: –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    return
                # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Ç—É—Ç –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                await asyncio.sleep(CHECK_INTERVAL)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if random.random() < 0.5:  # 50% —à–∞–Ω—Å, —á—Ç–æ "–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                  await _process_successful_payment(message, bot, order, amount_decimal, log_id)
                  return
            except Exception as e:
                logging.error(
                    f"{log_id} - card.py - check_card_payment: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}"
                )
                await asyncio.sleep(CHECK_INTERVAL)

    except asyncio.CancelledError:
        logging.info(f"{log_id} - card.py - check_card_payment: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    finally:
            _payment_timeout_handler(message, bot, order, log_id)


async def _get_product_data(product_name, order, user_id, bot, log_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    logging.info(
        f"{log_id} - card.py - _get_product_data: "
        f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}"
    )
    product_name_for_category = product_name.split(' ')[0]
    category_name = get_product_category(product_name_for_category)
    product_price = get_product_price(order.get("product_id"))
    if not category_name or product_price is None:
        logging.warning(
            f"{log_id} - card.py - _get_product_data: "
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è product: {product_name}"
        )
        await bot.send_message(
            chat_id=user_id,
            text=(
                "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
                f"  –¢–æ–≤–∞—Ä: {product_name}\n\n"
                "  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            ), parse_mode="HTML"
        )
        return None
    logging.info(
        f"{log_id} - card.py - _get_product_data: "
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}', —Ü–µ–Ω–∞  '{product_price}' –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}"
    )
    return category_name, product_price

async def _process_successful_payment(message: Message, bot: Bot, order: dict, amount_decimal: Decimal, log_id: uuid.UUID):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π."""
    payment_id = order.get("payment_id")
    user_id = message.from_user.id
    order_id = order.get("id")
    product_name = order.get("product_name")
    logging.info(f"{log_id} - card.py - _process_successful_payment: –ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")

    order["status"] = "–í—ã–ø–æ–ª–Ω–µ–Ω"

    if shared_context.user_context and user_id in shared_context.user_context:
         shared_context.user_context[user_id]["payment_status"] = "completed"
    else:
        logging.warning(f"{log_id} - card.py - _process_successful_payment: user_context not found for user_id: {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product_data = await _get_product_data(product_name, order, user_id, bot, log_id)
    if not product_data:
       return True
    category_name, product_price = product_data
    user_city = order.get("city")
    user_district = order.get("district")

    if not user_city or not user_district:
         user_error_text = (
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"   –¢–æ–≤–∞—Ä: {product_name}\n\n"
            "   ‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
         await bot.send_message(
            chat_id=user_id,
            text=user_error_text, parse_mode='HTML'
        )
         logging.info(
            f"{log_id} - card.py - _process_successful_payment: –ì–æ—Ä–æ–¥ –∏–ª–∏ —Ä–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}'. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        )
         return True

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ paid_products
    paid_products = get_location_info_from_paid_products(product_name, user_city, user_district)
    if not paid_products:
          user_error_text = (
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"   –¢–æ–≤–∞—Ä: {product_name}\n\n"
            "   ‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
          await bot.send_message(
            chat_id=user_id,
            text=user_error_text, parse_mode='HTML'
        )
          logging.info(
            f"{log_id} - card.py - _process_successful_payment: –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ paid_products"
        )
          return True

    # –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    paid_product_data = paid_products[0]

     # –ü–æ–ª—É—á–∞–µ–º id –∏ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    paid_product_id = paid_product_data.get('id')
    table_name = paid_product_data.get('table_name')
    if not paid_product_id:
        logging.error(
            f"{log_id} - card.py - _process_successful_payment: id —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É paid_products"
        )
        user_error_text = (
            "‚úÖ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            f"   –¢–æ–≤–∞—Ä: {product_name}\n\n"
            "   ‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: id —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º."
        )
        await bot.send_message(
            chat_id=user_id,
            text=user_error_text, parse_mode='HTML'
        )
        return True

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
    instruction_text = paid_product_data.get('instruction') if paid_product_data.get("instruction") else "–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ / No instruction"
    escaped_instruction_text = re.sub(r'([`*_])', r'\\\1', instruction_text) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = (
        f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {amount_decimal}\n"
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∫–∞—Ä—Ç–æ–π.\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {paid_product_data.get('city')}, {paid_product_data.get('district')}\n"
        f"üó∫Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: <code>{escaped_instruction_text}</code>"
        f"\n\nEnglish: üéâ Thank you for your purchase!\n"
        f"üí∞ Paid amount: {amount_decimal}\n"
        f"‚úÖ Your order has been successfully paid with card.\n\n"
        f"üìç Location: {paid_product_data.get('city')}, {paid_product_data.get('district')}\n"
        f"üó∫Ô∏è Instructions: <code>{escaped_instruction_text}</code>"
    )

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å—Ç—É–∫–∞
    user_obj = await bot.get_chat(user_id)
    username = user_obj.username if user_obj.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'

    usdt_trc20_wallet = get_wallet_address('USDT_TRC20')
    otstuk_text = (
            "üí∞ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üíµ –°—É–º–º–∞: {amount_decimal} USD\n"
            f"üîó –ê–¥—Ä–µ—Å: {usdt_trc20_wallet if usdt_trc20_wallet else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {paid_product_data.get('city')}, {paid_product_data.get('district')}\n"
            f"üó∫Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instruction_text}"
    )

    media_group = []
    if paid_product_data.get('images') and isinstance(paid_product_data.get('images'), str):
        images = paid_product_data.get('images').replace('[', '').replace(']', '').replace('"', '').split(', ')
        for image_path in images:
            if image_path:
                full_image_path = os.path.join(
                    os.path.dirname(__file__),
                    "..",
                    image_path.lstrip("\\/"),
                )
                if os.path.exists(full_image_path):
                    media_group.append(InputMediaPhoto(media=FSInputFile(full_image_path)))
                else:
                    logging.warning(f"{log_id} - card.py - _process_successful_payment: –§–∞–π–ª {full_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω / File {full_image_path} not found")
    
    if media_group:
         try:
            logging.info(f"{log_id} - card.py - _process_successful_payment: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º: {media_group}")
            await bot.send_media_group(chat_id=user_id, media=media_group)
            await bot.send_message(chat_id=user_id, text=user_text, parse_mode="HTML")
            logging.info(f"{log_id} - card.py - _process_successful_payment: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ / Message with media and text sent successfully")
         except Exception as e:
                logging.error(f"{log_id} - card.py - _process_successful_payment: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
                await bot.send_message(
                    chat_id=user_id,
                    text=user_text, parse_mode="HTML"
                )
                logging.info(f"{log_id} - card.py - _process_successful_payment: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ / Error message sent")
    else:
         await bot.send_message(
            chat_id=user_id,
            text=user_text, parse_mode="HTML"
        )
         logging.info(f"{log_id} - card.py - _process_successful_payment: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ / Message without media sent successfully")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä –≤ sold_products –∏ —É–¥–∞–ª—è–µ–º –∏–∑ paid_products
    try:
        move_paid_product_to_sold_products(product_name, user_city, user_district, user_id, paid_product_id, table_name)
        logging.info(
             f"{log_id} - card.py - _process_successful_payment: –¢–æ–≤–∞—Ä '{product_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ sold_products / Product '{product_name}' moved to sold_products"
        )
    except Exception as e:
        logging.error(
            f"{log_id} - card.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ sold_products: {e}"
        )

     # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω'
    if update_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω"):
         logging.info(f"{log_id} - card.py - _process_successful_payment: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω' / Status of order {order_id} updated to 'Completed'")
    else:
        logging.error(f"{log_id} - card.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id} / Error updating order status {order_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    try:
            await send_order_notification(
                bot=bot,
                user_id=user_id,
                log_id=log_id,
                username=username,
                product_name=product_name,
                category_name=category_name,
                amount=amount_decimal,
                order_id=order_id,
                status="–í—ã–ø–æ–ª–Ω–µ–Ω",
                payment_method="CARD",
                wallet_address="–ö–∞—Ä—Ç–∞",
                order_text=otstuk_text,
                order_media=media_group
            )
    except Exception as e:
            logging.error(f"{log_id} - card.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –†–ï–§–ï–†–ï–†–£ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª)
    user_data = get_user(user_id)
    if user_data and user_data[2] is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä
            referrer_id = user_data[2]  # ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            bonus_amount = amount_decimal * Decimal("0.03")
            bonus_amount = round(bonus_amount, 2)

            add_referral_reward(referrer_id, bonus_amount)  # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É

            referrer_data = get_user(referrer_id)
            if referrer_data:
                new_referrer_balance = float(referrer_data[3]) + float(bonus_amount)
                new_referrer_balance = float(round(new_referrer_balance, 2))
                update_referral_purchases_amount(referrer_id, float(amount_decimal))
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                update_referral_purchases_count_column(referrer_id, user_id, float(amount_decimal))
                try:
                    await bot.send_message(
                        chat_id=referrer_id,
                        text=(
                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É!\n\n"
                            f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus_amount:.2f} USD.\n"
                            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_referrer_balance:.2f} USD."
                        ),
                    )
                except Exception as e:
                    logging.error(
                        f"{log_id} - card.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}"
                    )
            else:
                logging.warning(
                    f"{log_id} - card.py - _process_successful_payment: –†–µ—Ñ–µ—Ä–µ—Ä —Å ID {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω / Referrer with ID {referrer_id} not found"
                )


def _payment_timeout_handler(message: Message, bot: Bot, order: dict, log_id: uuid.UUID):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ."""
    payment_id = order.get("payment_id")
    user_id = message.from_user.id
    logging.info(f"{log_id} - card.py - _payment_timeout_handler: –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.")
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞.
    if shared_context.user_context and user_id in shared_context.user_context and shared_context.user_context[user_id].get("payment_status") == "completed":
        logging.info(f"{log_id} - card.py - _payment_timeout_handler: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} - —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
        return

    order["status"] = "–û—Ç–º–µ–Ω–µ–Ω"
    if shared_context.user_context and user_id in shared_context.user_context:
        task = shared_context.user_context[user_id].get("payment_task")
        if task:
            task.cancel()
            logging.info(
                 f"{log_id} - card.py - _payment_timeout_handler: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
        shared_context.user_context[user_id]["payment_status"] = "failed"
        shared_context.user_context[user_id] = {}
        logging.info(
            f"{log_id} - card.py - _payment_timeout_handler: –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω."
        )
    else:
        logging.warning(
            f"{log_id} - card.py - _payment_timeout_handler: user_context not found for user_id: {user_id}"
        )
    asyncio.create_task(bot.send_message(
        chat_id=user_id,
        text="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", parse_mode='HTML'
    ))