import logging
import asyncio
import random
import time
import os
from decimal import Decimal
import uuid
from aiogram import Bot, types
from aiogram.types import Message, InputMediaPhoto, FSInputFile
from handlers import shared_context
from datetime import datetime, timedelta
from database import (
    get_user,
    get_wallet_address,
    set_user_balance,
    update_referral_purchases_amount,
    get_product_category,
    get_product_price,
    get_location_info_from_paid_products,
    move_paid_product_to_sold_products,
    add_to_user_balance,
    add_referral_reward,
    update_order_status,
    update_referral_purchases_count_column
)
from .otstuk import send_order_notification
import re
from keyboards import main_menu_keyboard

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log',
    filemode='a'
)

CHECK_INTERVAL = 30  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

async def check_payment(message: Message, bot: Bot, order: dict, last_hour: datetime):
    """–ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã –∫–∞—Ä—Ç–æ–π."""
    payment_id = order.get("payment_id")
    amount_decimal = Decimal(str(order.get("amount")))
    user_id = message.from_user.id
    order_id = order.get("id")
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - card_checker.py - check_payment: –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, Order: {order}")
    start_time = time.time()

    try:
        while time.time() - start_time < 1800:  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç
            try:
                if shared_context.user_context and user_id in shared_context.user_context and shared_context.user_context[user_id].get("payment_status") == "completed":
                    logging.info(f"{log_id} - card_checker.py - check_payment: –ü–ª–∞—Ç–µ–∂ {payment_id} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏")
                    return

                # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —á—Ç–æ –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ (–∑–∞–≥–ª—É—à–∫–∞)
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ —Ç—É—Ç –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
                await asyncio.sleep(CHECK_INTERVAL)  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                if random.random() < 0.5:  # 50% —à–∞–Ω—Å, —á—Ç–æ "–æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞" –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
                    await _process_successful_payment(message, bot, order, amount_decimal, log_id)
                    return
            except Exception as e:
                logging.error(
                    f"{log_id} - card_checker.py - check_payment: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}"
                )
                await asyncio.sleep(CHECK_INTERVAL)

    except asyncio.CancelledError:
        logging.info(f"{log_id} - card_checker.py - check_payment: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    finally:
           _payment_timeout_handler(message, bot, order, log_id)


async def _get_product_data(product_name, order, user_id, bot, log_id):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    logging.info(
        f"{log_id} - card_checker.py - _get_product_data: "
        f"–ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product_name}"
    )
    product_name_for_category = product_name.split(' ')[0]
    category_name = get_product_category(product_name_for_category)
    product_price = get_product_price(order.get("product_id"))
    if not category_name or product_price is None:
        logging.warning(
            f"{log_id} - card_checker.py - _get_product_data: "
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–ª–∏ —Ü–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è product: {product_name}"
        )
        await bot.send_message(
            chat_id=user_id,
            text=(
                f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–∫–∞–∑ ‚Ññ{order.get('id')}\n\n"
                f"–¢–æ–≤–∞—Ä: {product_name}\n\n"
                f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                f"\n\nEnglish: Payment confirmed! Order ‚Ññ{order.get('id')}\n\n"
                f"Product: {product_name}\n\n"
                f"Instruction: Could not get product data. Contact admin."

            ),
        )
        return None
    logging.info(
        f"{log_id} - card_checker.py - _get_product_data: "
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}', —Ü–µ–Ω–∞  '{product_price}' –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {product_name}"
    )
    return category_name, product_price


async def _process_successful_payment(message: Message, bot: Bot, order: dict, amount_decimal: Decimal, log_id: uuid.UUID):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∫–∞—Ä—Ç–æ–π."""
    payment_id = order.get("payment_id")
    user_id = message.from_user.id
    order_id = order.get("id")
    product_name = order.get("product_name")
    logging.info(f"{log_id} - card_checker.py - _process_successful_payment: –ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")

    order["status"] = "–í—ã–ø–æ–ª–Ω–µ–Ω"

    if shared_context.user_context and user_id in shared_context.user_context:
         shared_context.user_context[user_id]["payment_status"] = "completed"
    else:
        logging.warning(f"{log_id} - card_checker.py - _process_successful_payment: user_context not found for user_id: {user_id}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
    product_data = await _get_product_data(product_name, order, user_id, bot, log_id)
    if not product_data:
       return True
    category_name, product_price = product_data
    user_city = order.get("city")
    user_district = order.get("district")

    if not user_city or not user_district:
         user_error_text = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n\n"
            f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
         await bot.send_message(
            chat_id=user_id,
            text=user_error_text, parse_mode='HTML'
        )
         logging.info(
            f"{log_id} - card_checker.py - _process_successful_payment: –ì–æ—Ä–æ–¥ –∏–ª–∏ —Ä–∞–π–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Ç–æ–≤–∞—Ä–∞ '{product_name}'. –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        )
         return True

    # –ò—â–µ–º —Ç–æ–≤–∞—Ä –≤ paid_products
    paid_products = get_location_info_from_paid_products(product_name, user_city, user_district)
    if not paid_products:
          user_error_text = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n\n"
            f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
          await bot.send_message(
            chat_id=user_id,
            text=user_error_text, parse_mode='HTML'
        )
          logging.info(
            f"{log_id} - card_checker.py - _process_successful_payment: –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ paid_products"
        )
          return True

    # –í—ã–±–∏—Ä–∞–µ–º –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
    paid_product_data = paid_products[0]

     # –ü–æ–ª—É—á–∞–µ–º id –∏ –∏–º—è —Ç–∞–±–ª–∏—Ü—ã
    paid_product_id = paid_product_data.get('id')
    table_name = paid_product_data.get('table_name')
    if not paid_product_id:
        logging.error(
            f"{log_id} - card_checker.py - _process_successful_payment: id —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ö–æ—Ç—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É paid_products"
        )
        user_error_text = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n\n"
            f"‚ö†Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: id —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–æ–º."
        )
        await bot.send_message(
            chat_id=user_id,
            text=user_error_text, parse_mode='HTML'
        )
        return True

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
    instruction_text = paid_product_data.get('instruction') if paid_product_data.get("instruction") else "–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ / No instruction"
    escaped_instruction_text = re.sub(r'([`*_])', r'\\\1', instruction_text) # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_text = (
        f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {amount_decimal}\n"
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω –∫–∞—Ä—Ç–æ–π.\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {paid_product_data.get('city')}, {paid_product_data.get('district')}\n"
        f"üó∫Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: <code>{escaped_instruction_text}</code>"
        f"\n\nEnglish: üéâ Thank you for your purchase!\n"
        f"üí∞ Paid amount: {amount_decimal}\n"
        f"‚úÖ Your order has been successfully paid with card.\n\n"
        f"üìç Location: {paid_product_data.get('city')}, {paid_product_data.get('district')}\n"
        f"üó∫Ô∏è Instructions: <code>{escaped_instruction_text}</code>"
    )

      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å—Ç—É–∫–∞
    user_obj = await bot.get_chat(user_id)
    username = user_obj.username if user_obj.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'
    usdt_trc20_wallet = get_wallet_address('USDT_TRC20')
    otstuk_text = (
            f"üí∞ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üíµ –°—É–º–º–∞: {amount_decimal} USD\n"
            f"üîó –ê–¥—Ä–µ—Å: {usdt_trc20_wallet if usdt_trc20_wallet else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {paid_product_data.get('city')}, {paid_product_data.get('district')}\n"
            f"üó∫Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instruction_text}"
    )

    media_group = []
    if paid_product_data.get('images') and isinstance(paid_product_data.get('images'), str):
        images = paid_product_data.get('images').replace('[', '').replace(']', '').replace('"', '').split(', ')
        for image_path in images:
            if image_path:
                full_image_path = os.path.join(
                    os.path.dirname(__file__),
                    "..",
                    image_path.lstrip("\\/"),
                )
                if os.path.exists(full_image_path):
                    media_group.append(InputMediaPhoto(media=FSInputFile(full_image_path)))
                else:
                    logging.warning(f"{log_id} - card_checker.py - _process_successful_payment: –§–∞–π–ª {full_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω / File {full_image_path} not found")
    
    if media_group:
         try:
            logging.info(f"{log_id} - card_checker.py - _process_successful_payment: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º: {media_group}")
            await bot.send_media_group(chat_id=user_id, media=media_group)
            await bot.send_message(chat_id=user_id, text=user_text, parse_mode="HTML")
            logging.info(f"{log_id} - card_checker.py - _process_successful_payment: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞ –∏ —Ç–µ–∫—Å—Ç–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ / Message with media and text sent successfully")
         except Exception as e:
                logging.error(f"{log_id} - card_checker.py - _process_successful_payment: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞: {e}")
                await bot.send_message(
                    chat_id=user_id,
                    text=user_text, parse_mode="HTML"
                )
                logging.info(f"{log_id} - card_checker.py - _process_successful_payment: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ / Error message sent")
    else:
         await bot.send_message(
            chat_id=user_id,
            text=user_text, parse_mode="HTML"
        )
         logging.info(f"{log_id} - card_checker.py - _process_successful_payment: –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ / Message without media sent successfully")

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ç–æ–≤–∞—Ä –≤ sold_products –∏ —É–¥–∞–ª—è–µ–º –∏–∑ paid_products
    try:
        move_paid_product_to_sold_products(product_name, user_city, user_district, user_id, paid_product_id, table_name)
        logging.info(
             f"{log_id} - card_checker.py - _process_successful_payment: –¢–æ–≤–∞—Ä '{product_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ sold_products / Product '{product_name}' moved to sold_products"
        )
    except Exception as e:
        logging.error(
            f"{log_id} - card_checker.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ sold_products: {e}"
        )

     # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω'
    if update_order_status(order_id, "–í—ã–ø–æ–ª–Ω–µ–Ω"):
         logging.info(f"{log_id} - card_checker.py - _process_successful_payment: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–í—ã–ø–æ–ª–Ω–µ–Ω' / Status of order {order_id} updated to 'Completed'")
    else:
        logging.error(f"{log_id} - card_checker.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id} / Error updating order status {order_id}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    try:
            await send_order_notification(
                bot=bot,
                user_id=user_id,
                log_id=log_id,
                username=username,
                product_name=product_name,
                category_name=category_name,
                amount=amount_decimal,
                order_id=order_id,
                status="–í—ã–ø–æ–ª–Ω–µ–Ω",
                payment_method="CARD",
                wallet_address="–ö–∞—Ä—Ç–∞",
                order_text=otstuk_text,
                order_media=media_group
            )
    except Exception as e:
            logging.error(f"{log_id} - card_checker.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

    # –ù–∞—á–∏—Å–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –†–ï–§–ï–†–ï–†–£ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª)
    user_data = get_user(user_id)
    if user_data and user_data[2] is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–µ—Ñ–µ—Ä–µ—Ä
            referrer_id = user_data[2]  # ID —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            bonus_amount = amount_decimal * Decimal("0.03")
            bonus_amount = round(bonus_amount, 2)

            add_referral_reward(referrer_id, bonus_amount)  # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å —Ä–µ—Ñ–µ—Ä–µ—Ä—É

            referrer_data = get_user(referrer_id)
            if referrer_data:
                new_referrer_balance = float(referrer_data[3]) + float(bonus_amount)
                new_referrer_balance = float(round(new_referrer_balance, 2))
                update_referral_purchases_amount(referrer_id, float(amount_decimal))
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                update_referral_purchases_count_column(referrer_id, user_id, float(amount_decimal))
                try:
                    await bot.send_message(
                        chat_id=referrer_id,
                        text=(
                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É!\n\n"
                            f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus_amount:.2f} USD.\n"
                            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_referrer_balance:.2f} USD."
                        ),
                    )
                except Exception as e:
                    logging.error(
                        f"{log_id} - card_checker.py - _process_successful_payment: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}"
                    )
            else:
                logging.warning(
                    f"{log_id} - card_checker.py - _process_successful_payment: –†–µ—Ñ–µ—Ä–µ—Ä —Å ID {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω / Referrer with ID {referrer_id} not found"
                )


def _payment_timeout_handler(message: Message, bot: Bot, order: dict, log_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–∏—Ç—É–∞—Ü–∏—é, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ."""
    payment_id = order.get("payment_id")
    user_id = message.from_user.id
    logging.info(f"{log_id} - card_checker.py - _payment_timeout_handler: –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.")
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞.
    if shared_context.user_context and user_id in shared_context.user_context and shared_context.user_context[user_id].get("payment_status") == "completed":
        logging.info(f"{log_id} - card_checker.py - _payment_timeout_handler: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} - —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ–ø–ª–∞—á–µ–Ω")
        return

    order["status"] = "–û—Ç–º–µ–Ω–µ–Ω"
    if shared_context.user_context and user_id in shared_context.user_context:
        task = shared_context.user_context[user_id].get("payment_task")
        if task:
            task.cancel()
            logging.info(
                 f"{log_id} - card_checker.py - _payment_timeout_handler: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
        shared_context.user_context[user_id]["payment_status"] = "failed"
        shared_context.user_context[user_id] = {}
        logging.info(
            f"{log_id} - card_checker.py - _payment_timeout_handler: –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω."
        )
    else:
        logging.warning(
            f"{log_id} - card_checker.py - _payment_timeout_handler: user_context not found for user_id: {user_id}"
        )
    asyncio.create_task(bot.send_message(
        chat_id=user_id,
        text="–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω. / Payment timeout. Your order has been canceled."
    ))



def start_payment_check(message: Message, bot: Bot, order: dict):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    payment_id = order.get("payment_id")
    amount = Decimal(str(order.get("amount")))  # Decimal
    user_id = message.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - card_checker.py - start_payment_check: User {user_id}, Payment ID: {payment_id}, Amount: {amount}")

    if shared_context.user_context and user_id in shared_context.user_context:
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        task = shared_context.user_context[user_id].get("payment_task")
        if task:
            task.cancel()
            logging.info(f"{log_id} - card_checker.py - start_payment_check: –û—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π payment_task –¥–ª—è user {user_id}")
        shared_context.user_context[user_id]["payment_status"] = "pending"
    else:
        logging.warning(f"{log_id} - card_checker.py - start_payment_check: user_context not found for user_id: {user_id}")

    now = datetime.now()
    last_checked_time = now - timedelta(hours=1)
    task = asyncio.create_task(_check_payment_task(message, bot, order, last_checked_time, log_id))
    
    if shared_context.user_context and user_id in shared_context.user_context:
        shared_context.user_context[user_id]["payment_task"] = task

    # Immediate return to the main menu
    asyncio.create_task(bot.send_message(message.chat.id, "–û–∂–∏–¥–∞—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã... \n\n Waiting for payment confirmation...", reply_markup=main_menu_keyboard()))
    return task


async def _check_payment_task(message: Message, bot: Bot, order: dict, last_hour: datetime, log_id: uuid.UUID):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ —Å –æ—Ç–º–µ–Ω–æ–π —Ç–∞—Å–∫–∞."""
    try:
        await check_payment(message, bot, order, last_hour)
    except asyncio.CancelledError:
        logging.info(f"{log_id} - card_checker.py - _check_payment_task: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {order.get('payment_id')} –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except Exception as e:
        logging.error(
            f"{log_id} - card_checker.py - _check_payment_task: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ _check_payment_task: {e}"
        )
    finally:
        if shared_context.user_context and message.from_user.id in shared_context.user_context:
            task = shared_context.user_context[message.from_user.id].get("payment_task")
            if task:
                task.cancel()
                logging.info(
                    f"{log_id} - card_checker.py - _check_payment_task: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {order.get('payment_id')} –æ—Ç–º–µ–Ω–µ–Ω–∞."
                )
            shared_context.user_context[message.from_user.id].pop("payment_task", None)
            logging.info(
                f"{log_id} - card_checker.py - _check_payment_task: payment_task —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}."
            )