from aiogram import Dispatcher, Bot
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, FSInputFile
from aiogram.utils.markdown import bold, text, italic
from handlers import shared_context
import logging
from aiogram.exceptions import TelegramBadRequest
import os
from database import get_support_channel_id, get_user  # –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º get_user –∏–∑ database.py

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log',
    filemode='a'
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
async def delete_message(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
    except TelegramBadRequest as e:
        logging.info(f"Ignoring TelegramBadRequest: {e}")
    except Exception as e:
        logging.error(f"Error deleting message: {e}")

def register_earn_handler(dp: Dispatcher):
    @dp.message(lambda message: message.text == "–†–∞–±–æ—Ç–∞ / Jobs")
    async def earn_handler(message: Message, bot: Bot):
        user_id = message.from_user.id
        logging.info(f"earn.py - earn_handler: User {user_id} pressed '–†–∞–±–æ—Ç–∞ / Jobs'")

         # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in shared_context.user_context:
            shared_context.user_context[user_id] = {}

        offer_text = text(
            bold("üá∑üá∫üí∏–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n"),
            "‚Ä¢ ", bold("–°—Ç–∞–±–∏–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É\n"),
            "‚Ä¢  –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–Ω—è—Ç–æ—Å—Ç—å —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π –∏ –≥–∏–±–∫–∏–º –≥—Ä–∞—Ñ–∏–∫–æ–º!\n",
            "‚Ä¢  –ü–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!\n",
            "‚Ä¢  –ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏ –≤ —Å–æ—Å–µ–¥–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –æ—Å—Ç—Ä–æ–≤–∞.\n\n",
             bold("–û—Ç –í–∞—Å:\n"),
            "‚Ä¢ –ó–∞–ª–æ–≥ –æ—Ç 600$\n",
            "‚Ä¢  –ù–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞\n",
            "‚Ä¢  –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫\n",
            "‚Ä¢  –ñ–µ–ª–∞–Ω–∏–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å!\n\n",
            "–ñ–¥–µ–º —Ç–µ–±—è!üòâ\n",
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–æ—Ç–ø—Ä–∞–≤–∏—Ç—å¬ª –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n",
             "____________________________________\n\n",
            bold("üá∫üá∏üí∏We offer:\n"),
            "‚Ä¢ ", bold("Stable work\n"),
            "‚Ä¢  Guaranteed employment with competitive pay and flexible hours!\n",
            "‚Ä¢  Full confidentiality and a reliable security system!\n",
            "‚Ä¢  Business trips to neighboring cities and islands.\n\n",
             bold("From you:\n"),
            "‚Ä¢ Deposit from $600\n",
            "‚Ä¢  Having transport\n",
            "‚Ä¢  No bad habits\n",
            "‚Ä¢  Desire to earn!\n\n",
            "We are waiting for you!üòâ\n",
            "Just click the ‚Äúsend‚Äù button and we will contact you soon!",
            sep=""
        )

        # –ò–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        send_button = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å / Send", callback_data="vacancies_send_form")]
        ])
        
        # –ü—É—Ç—å –∫ –∫–∞—Ä—Ç–∏–Ω–∫–µ
        image_path = os.path.join(os.path.dirname(__file__), "..", "data", "images", "123345.jpg")
        logging.info(f"earn.py - earn_handler: DEBUG: Image path - {image_path}")

        try:
            if os.path.exists(image_path):
                photo = FSInputFile(image_path)
                sent_message = await message.answer_photo(photo=photo, caption=offer_text, reply_markup=send_button, parse_mode="Markdown")
                shared_context.user_context[user_id]["application_msg_id"] = sent_message.message_id
                shared_context.user_context[user_id]["image_msg_id"] = sent_message.message_id  # Save message_id of the combined message

            else:
                 sent_message = await message.answer(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{offer_text}", reply_markup=send_button, parse_mode="Markdown")
                 shared_context.user_context[user_id]["application_msg_id"] = sent_message.message_id
                 shared_context.user_context[user_id]["image_msg_id"] = None

        except Exception as e:
             sent_message = await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}. –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n{offer_text}", reply_markup=send_button, parse_mode="Markdown")
             shared_context.user_context[user_id]["application_msg_id"] = sent_message.message_id
             shared_context.user_context[user_id]["image_msg_id"] = None

        shared_context.user_context[user_id]["step"] = "job_form_filled_from_vacancies"
 
    @dp.callback_query(lambda callback_query: callback_query.data == "vacancies_send_form")
    async def handle_vacancies_send_form(callback_query: CallbackQuery, bot: Bot):
        user_id = callback_query.from_user.id
        logging.info(f"earn.py - handle_vacancies_send_form: User {user_id} pressed '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É / Send application' from vacancies")

        # Get user info - get user username from database
        user_data = get_user(user_id)
        if user_data and user_data[5]:
             user_username = user_data[5]
        else:
            user = await bot.get_chat(user_id)
            user_username = user.username
        
        user_link = f"tg://user?id={user_id}"
        # Get text from message caption
        if callback_query.message.caption:
             application_text = callback_query.message.caption
        else:
             application_text = callback_query.message.text

        # Construct message for support channel
        if user_username:
            support_message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Ä–∞–±–æ—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user_username}\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≥–ª–∞–≤–Ω–æ–º—É, –ø—É—Å—Ç—å –ø–æ–ø–∏–∑–¥–∏—Ç —Å –Ω–∏–º, –º–æ–∂–µ—Ç –Ω–æ—Ä–º –∫—É—Ä–∞"
        else:
            support_message = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞ —Ä–∞–±–æ—Ç—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_link}\n\n–ü–µ—Ä–µ–¥–∞–π—Ç–µ –≥–ª–∞–≤–Ω–æ–º—É, –ø—É—Å—Ç—å –ø–æ–ø–∏–∑–¥–∏—Ç —Å –Ω–∏–º, –º–æ–∂–µ—Ç –Ω–æ—Ä–º –∫—É—Ä–∞"

        try:
            from main import main_menu_keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            
            # –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            support_channel_id = get_support_channel_id()
            if support_channel_id:
                if not isinstance(support_channel_id, int):
                     logging.warning(f"earn.py - handle_vacancies_send_form: SUPPORT_CHANNEL_ID is not int, converting to int")
                     support_channel_id = int(support_channel_id)
                     logging.info(f"earn.py - handle_vacancies_send_form: sending message to channel ID: {support_channel_id}, type: {type(support_channel_id)}")
                     await bot.send_message(chat_id=support_channel_id, text=support_message)
                else:
                     logging.info(f"earn.py - handle_vacancies_send_form: sending message to channel ID: {support_channel_id}, type: {type(support_channel_id)}")
                     await bot.send_message(chat_id=support_channel_id, text=support_message)
            else:
                 logging.error(f"earn.py - handle_vacancies_send_form: support_channel_id is None.")
                 await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ \n\n Failed to send the application, please try again later")
                 return

            await callback_query.answer("–í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. \n\n Your application has been sent.")

            application_msg_id = shared_context.user_context[user_id].get("application_msg_id")
            image_msg_id = shared_context.user_context[user_id].get("image_msg_id")

            if application_msg_id:
                await delete_message(bot, user_id, application_msg_id)
            if image_msg_id:
                await delete_message(bot, user_id, image_msg_id)

            shared_context.user_context[user_id]["step"] = "main_menu"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await bot.send_message(chat_id=user_id, text="–°–ø–∞—Å–∏–±–æ! –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ! \n\n Thank you! We will review your job application and reply as soon as possible!", reply_markup=main_menu_keyboard())
        except Exception as e:
            logging.error(f"earn.py - handle_vacancies_send_form: Error sending message to support channel: {e}")
            await callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ \n\n Failed to send the application, please try again later")