import asyncio
from datetime import datetime, timedelta
import os
from aiogram import Dispatcher, Bot, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
import logging
import handlers.shared_context
import random
from decimal import Decimal
import uuid
from handlers.payment_check import check_payment
from handlers.payment_check import start_payment_check as start_usdt_trc20_payment_check
from handlers.btc_checker import start_btc_payment_check
from handlers.usdt_bep20_checker import start_payment_check as start_usdt_bep20_payment_check
from handlers.eth_checker import start_payment_check as start_payment_check_eth

from database import (
    add_to_user_balance,
    get_user_balance,
    set_user_balance,
    get_user,
    update_referral_purchases_amount,
    get_wallet_address,
    add_order,
    move_paid_product_to_sold_products,
    get_product_category,
    get_product_price,
    get_paid_product_by_location,
    update_referral_purchases_count_column,
    get_location_info_from_paid_products
)
from .crypto_rates import CryptoRates
from keyboards import main_menu_keyboard
import aiohttp
import requests
from .otstuk import send_order_notification

logging.basicConfig(level=logging.INFO)

CHECK_INTERVAL = 30

payment_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="USDT TRC20"), KeyboardButton(text="USDT BEP20")],
        [KeyboardButton(text="ETH"), KeyboardButton(text="BITCOIN")],
        [KeyboardButton(text="–ë–ê–õ–ê–ù–° –ë–û–¢–ê"),KeyboardButton(text="–†–£–ë–õ–ò")],
        [KeyboardButton(text="–ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

async def payment_options_handler(message: Message, user_context: dict):
    user_id = message.from_user.id
    if user_id not in handlers.shared_context.user_context:
        handlers.shared_context.user_context[user_id] = {}
    handlers.shared_context.user_context[user_id]["step"] = "payment_pending"
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: ‚¨áÔ∏è\n\nEnglish: Choose a payment method: ‚¨áÔ∏è",
        reply_markup=payment_keyboard
    )

def register_payment_handler(dp: Dispatcher):
    dp.message.register(payment_options_handler, lambda message: message.text == "–ö—É–ø–∏—Ç—å")

    @dp.message(lambda message: message.text == "–ö—É–ø–∏—Ç—å")
    async def buy_handler(message: Message, bot: Bot):
        await payment_options_handler(message, bot)

    async def _process_payment(message: Message, bot: Bot, payment_method: str, crypto_type: str = None):
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        logging.info(f"{log_id} - payment_handler.py - _process_payment: User {user_id}")

        if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context and handlers.shared_context.user_context[user_id].get("payment_status") == "pending":
            logging.info(f"{log_id} - payment_handler.py - _process_payment: payment_status is pending - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑")
            await bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. \n\n You already have an incomplete order")
            return

        user_context = handlers.shared_context.user_context.get(user_id, {})
        product_id = user_context.get("selected_product_id")
        product_price = Decimal(str(user_context.get("selected_product_price")))
        random_cents = Decimal(str(round(random.uniform(0.01, 0.99), 2)))
        payment_amount = (product_price + random_cents).quantize(Decimal("0.00"))

        handlers.shared_context.user_context[user_id]["payment_method"] = payment_method
        handlers.shared_context.user_context[user_id]["amount"] = payment_amount
        handlers.shared_context.user_context[user_id]["product_name"] = user_context.get("product_name")
        handlers.shared_context.user_context[user_id]["category_name"] = user_context.get("selected_category")
        handlers.shared_context.user_context[user_id]["selected_product"] = {
            "name": user_context.get("product_name"),
            "category": user_context.get("selected_category"),
            "id": product_id
        }
        handlers.shared_context.user_context[user_id]["selected_product_price"] = product_price
        handlers.shared_context.user_context[user_id]["payment_id"] = f"crypto_payment_{uuid.uuid4()}"
        handlers.shared_context.user_context[user_id]["amount_with_cents"] = payment_amount
        handlers.shared_context.user_context[user_id]["paid_products_table"] = user_context.get("selected_table")
        handlers.shared_context.user_context[user_id]["crypto_amount"] = None

        wallet_address = get_wallet_address(payment_method)
        if not wallet_address:
            logging.error(
                f"{log_id} - payment_handler.py - _process_payment: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å {payment_method} –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞")
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ \n\n Error: Could not get wallet address. Please try again later")
            return

        payment_message = ""
        if crypto_type:
            crypto_data = await CryptoRates.convert_usd_to_crypto(payment_amount, crypto_type)
            if not crypto_data:
                logging.error(
                    f"{log_id} - payment_handler.py - _process_payment: User {user_id}, Failed to convert USD to {crypto_type}.")
                await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USD –≤ {crypto_type}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. \n\n Error: Failed to convert USD to {crypto_type}. Please try again later.")
                return
            crypto_amount = crypto_data.get('crypto_amount')
            handlers.shared_context.user_context[user_id][f"{crypto_type.lower()}_amount"] = crypto_amount
            handlers.shared_context.user_context[user_id]["crypto_amount"] = crypto_amount
            payment_message = f"üòé –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –≤ {payment_method}\n\n" \
                              f"üíµ –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{wallet_address}</code> (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)\n\n" \
                              f"‚úçÔ∏è –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <code>{crypto_amount:.8f}</code>  {crypto_type.upper()} (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)\n" \
                              f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¢–û–ß–ù–û</b> —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –≤ {crypto_type.upper()}.\n\n" \
                              f"‚òùÔ∏è –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ü–õ–ê–¢–ò–õ</b>, —á—Ç–æ–±—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–ª –≤–∞–º –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
            payment_message += f"\n\nEnglish: üòé You have chosen to pay with {payment_method}\n\n" \
                              f"üíµ Deposit address: <code>{wallet_address}</code> (Copied by pressing)\n\n" \
                              f"‚úçÔ∏è Amount to pay: <code>{crypto_amount:.8f}</code> {crypto_type.upper()} (Copied by pressing)\n" \
                              f"Please send the <b>EXACT</b> amount in {crypto_type.upper()}.\n\n" \
                              f"‚òùÔ∏è After that press the <b>PAID</b> button so the bot will send your order after verification."
        else:
            payment_message = f"üòé –í—ã –≤—ã–±—Ä–∞–ª–∏ {payment_method}\n\n" \
                              f"üíµ –ê–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: <code>{wallet_address}</code> (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º) \n\n" \
                              f"‚úçÔ∏è –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USD\n" \
                              f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¢–û–ß–ù–û</b> —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã—à–µ –∞–¥—Ä–µ—Å.\n\n" \
                              f"‚òùÔ∏è –ü–æ—Ç–æ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ü–õ–ê–¢–ò–õ</b>, —á—Ç–æ–±—ã –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞–ª –≤–∞–º –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"
            payment_message += f"\n\nEnglish: üòé You have chosen {payment_method}\n\n" \
                              f"üíµ Deposit address: <code>{wallet_address}</code> (Copied by pressing)\n\n" \
                              f"‚úçÔ∏è Amount to pay: {payment_amount} USD\n" \
                              f"Please send the <b>EXACT</b> amount to the address above.\n\n" \
                              f"‚òùÔ∏è After that press the <b>PAID</b> button so the bot will send your order after verification."

        support_chat_link = "https://t.me/thai_hub_supp"

        payment_confirmation_keyboard = ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [KeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª / Paid")],
                [KeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è / Cancel")],
                 [KeyboardButton(text="–°–ê–ü–ü–û–†–¢ / SUPPORT", url=support_chat_link)],
            ]
        )

        await message.answer(payment_message, reply_markup=payment_confirmation_keyboard, parse_mode='HTML')

    @dp.message(lambda message: message.text == "USDT TRC20")
    async def usdt_trc20_payment_handler(message: Message, bot: Bot):
        await _process_payment(message, bot, "USDT_TRC20")

    @dp.message(lambda message: message.text == "USDT BEP20")
    async def usdt_bep20_payment_handler(message: Message, bot: Bot):
        await _process_payment(message, bot, "USDT_BEP20")

    @dp.message(lambda message: message.text == "ETH")
    async def eth_payment_handler(message: Message, bot: Bot):
        await _process_payment(message, bot, "ETH", "eth")

    @dp.message(lambda message: message.text == "BITCOIN")
    async def bitcoin_payment_handler(message: Message, bot: Bot):
        await _process_payment(message, bot, "BITCOIN", "btc")

    @dp.message(lambda message: message.text == "–ë–ê–õ–ê–ù–° –ë–û–¢–ê")
    async def bot_balance_handler(message: Message, bot: Bot):
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        logging.info(f"{log_id} - payment_handler.py - bot_balance_handler: User {user_id}")

        user_context = handlers.shared_context.user_context.get(user_id, {})
        product_id = user_context.get("selected_product_id")
        product_price = Decimal(str(user_context.get("selected_product_price")))
        random_cents = Decimal(str(round(random.uniform(0.01, 0.99), 2)))
        payment_amount = (product_price + random_cents).quantize(Decimal("0.00"))
        logging.info(
            f"{log_id} - payment_handler.py - bot_balance_handler: User {user_id}, Product ID: {product_id}, Price: {product_price}")
        handlers.shared_context.user_context[user_id]["payment_method"] = "BALANCE"
        handlers.shared_context.user_context[user_id]["amount"] = payment_amount
        handlers.shared_context.user_context[user_id]["product_name"] = user_context.get("product_name")
        handlers.shared_context.user_context[user_id]["category_name"] = user_context.get("selected_category")
        handlers.shared_context.user_context[user_id]["selected_product"] = {
            "name": user_context.get("product_name"),
            "category": user_context.get("selected_category"),
            "id": product_id
        }
        handlers.shared_context.user_context[user_id]["selected_product_price"] = product_price
        handlers.shared_context.user_context[user_id]["payment_id"] = f"bot_balance_{uuid.uuid4()}"
        handlers.shared_context.user_context[user_id]["images"] = user_context.get("selected_images")
        handlers.shared_context.user_context[user_id]["amount_with_cents"] = payment_amount
        handlers.shared_context.user_context[user_id]["paid_products_table"] = user_context.get("selected_table")

        user_balance = get_user_balance(user_id)
        if user_balance is None:
            logging.warning(
                f"{log_id} - payment_handler.py - bot_balance_handler: User {user_id} - –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –±–∞–ª–∞–Ω—Å. \n\n Error: Could not get your balance.")
            return
        user_balance = Decimal(str(user_balance))

        balance_confirmation_keyboard = ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [KeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å / Pay")],
                [KeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è / Cancel")],
                [KeyboardButton(text="–°–ê–ü–ü–û–†–¢ / SUPPORT", url="https://t.me/thai_hub_supp")],
            ]
        )

        await message.answer(
            f"üòé –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞.\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å –≤–∞—à–µ–≥–æ –±–æ—Ç–∞: {user_balance}\n"
            f"‚úçÔ∏è –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {payment_amount} USD\n"
             f"\n\nEnglish: üòé You have chosen to pay with your bot balance.\n\n"
            f"üí∞ Your bot balance: {user_balance}\n"
            f"‚úçÔ∏è Amount to pay: {payment_amount} USD\n",
            reply_markup=balance_confirmation_keyboard
        )

    @dp.message(lambda message: message.text == "–†–£–ë–õ–ò")
    async def rub_payment_handler(message: Message, bot: Bot):
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        logging.info(f"{log_id} - payment_handler.py - rub_payment_handler: User {user_id}")

        user_context = handlers.shared_context.user_context.get(user_id, {})
        product_price = Decimal(str(user_context.get("selected_product_price")))
        random_cents = Decimal(str(round(random.uniform(0.01, 0.99), 2)))
        payment_amount_usd = (product_price + random_cents).quantize(Decimal("0.00"))

        handlers.shared_context.user_context[user_id]["payment_method"] = "RUB"
        handlers.shared_context.user_context[user_id]["amount"] = payment_amount_usd
        handlers.shared_context.user_context[user_id]["payment_id"] = f"rub_payment_{uuid.uuid4()}"
        handlers.shared_context.user_context[user_id]["amount_with_cents"] = payment_amount_usd

        crypto_data = await CryptoRates.convert_usd_to_crypto(payment_amount_usd, "btc")
        if not crypto_data:
            logging.error(
                f"{log_id} - payment_handler.py - rub_payment_handler: User {user_id}, Failed to convert USD to BTC.")
            await message.answer(f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å USD –≤ BTC. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. \n\n Error: Failed to convert USD to BTC. Please try again later.")
            return
        btc_amount = crypto_data.get('crypto_amount')
        handlers.shared_context.user_context[user_id]["crypto_amount"] = btc_amount
        btc_wallet_address = get_wallet_address("BITCOIN")

        if not btc_wallet_address:
             logging.error(
                f"{log_id} - payment_handler.py - rub_payment_handler: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ BITCOIN")
             await message.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ \n\n Error: Could not get wallet address. Please try again later")
             return


        payment_message = (
    "üòé <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ —Ä—É–±–ª—è–º–∏</b>\n"
    "<tg-emoji emoji-id=\"5368786339707134225\">üí∏</tg-emoji> –ö–æ—Ç–æ—Ä–∞—è –Ω–µ –æ—Ç–Ω–∏–º–µ—Ç —É –≤–∞—Å –±–æ–ª—å—à–µ <b>5-—Ç–∏ –º–∏–Ω—É—Ç</b>\n\n"
    "<tg-emoji emoji-id=\"5442219117703293993\">ü§ù</tg-emoji> <b>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –Ω–∞–¥–µ–∂–Ω–æ–º—É –æ–±–º–µ–Ω–Ω–∏–∫—É</b> <a href='http://t.me/HUSTLE_BTC_BOT?start=7644052379'>@HUSTLE_BTC_BOT</a>\n\n"
    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–ó–∞–ø—É—Å—Ç–∏—Ç—å</b>\n"
    "<tg-emoji emoji-id=\"5368786339708972509\">‚û°Ô∏è</tg-emoji> –î–∞–ª–µ–µ –Ω–∞–∂–º–∏—Ç–µ - <b>–ö—É–ø–∏—Ç—å</b>\n"
    "<tg-emoji emoji-id=\"5368786339708972509\">‚û°Ô∏è</tg-emoji> –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–µ—Ç–µ - <b>BTC</b>\n"
    "<tg-emoji emoji-id=\"5368786339708972509\">‚û°Ô∏è</tg-emoji> –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–µ—Ç–µ - <b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É –∏–ª–∏ –°–ü–ë</b>\n\n"
    f"<tg-emoji emoji-id=\"5368786339707658093\">üí∞</tg-emoji> <b>–ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Å—É–º–º–∞:</b> <code>{btc_amount:.8f}</code> (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)\n\n"
    f"<tg-emoji emoji-id=\"5368786339708972509\">‚úâÔ∏è</tg-emoji> <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞—à BTC –∫–æ—à–µ–ª—ë–∫</b> –∏ <b>–¢–û–ß–ù–£–Æ</b> —Å—É–º–º—É –≤ –æ–±–º–µ–Ω–Ω–∏–∫:\n"
    f"<code>{btc_wallet_address}</code>\n (–ö–æ–ø–∏—Ä—É–µ—Ç—Å—è –Ω–∞–∂–∞—Ç–∏–µ–º)\n\n"
    "<tg-emoji emoji-id=\"5194812979794551452\">üí≥</tg-emoji> <b>–í–∞–º –≤—ã–¥–∞–¥—É—Ç –∫–∞—Ä—Ç—É</b>, –∫—É–¥–∞ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ä—É–±–ª–∏.\n"
    "<tg-emoji emoji-id=\"5368786339708972509\">üí∏</tg-emoji> <b>–ü–µ—Ä–µ–≤–æ–¥–∏—Ç–µ</b>\n\n"
    "<tg-emoji emoji-id=\"5368786339708972509\">‚úÖ</tg-emoji> <b>–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ–±–º–µ–Ω–Ω–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –ø–µ—Ä–µ–≤–æ–¥</b>,\n"
    "<tg-emoji emoji-id=\"5368786339708972509\">‚úÖ</tg-emoji> –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É - <b>–û–ü–õ–ê–¢–ò–õ</b>"
)

        support_chat_link = "https://t.me/thai_hub_supp"

        payment_confirmation_keyboard = ReplyKeyboardMarkup(
            resize_keyboard=True,
            keyboard=[
                [KeyboardButton(text="–û–ø–ª–∞—Ç–∏–ª / Paid")],
                [KeyboardButton(text="–û—Ç–∫–∞–∑–∞—Ç—å—Å—è / Cancel")],
                [KeyboardButton(text="–°–ê–ü–ü–û–†–¢ / SUPPORT", url=support_chat_link)],
            ]
        )

        await message.answer(payment_message, reply_markup=payment_confirmation_keyboard, parse_mode='HTML', disable_web_page_preview=True)


    async def _create_and_process_order(message: Message, bot: Bot, payment_method: str):
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        payment_uuid = handlers.shared_context.user_context[user_id].get("payment_id")
        amount = handlers.shared_context.user_context[user_id].get("amount", "unknown")
        product_name = handlers.shared_context.user_context[user_id].get("product_name", "unknown")
        category_name = handlers.shared_context.user_context[user_id].get("selected_category", "unknown")
        product_id = handlers.shared_context.user_context[user_id].get("selected_product_id")

        amount_with_cents = handlers.shared_context.user_context[user_id].get("amount_with_cents", "unknown")
        crypto_amount = handlers.shared_context.user_context[user_id].get("crypto_amount")

        user_obj = await bot.get_chat(user_id)
        username = user_obj.username if user_obj.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'

        logging.info(
            f"{log_id} - payment_handler.py - _create_and_process_order: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä")
        new_order = {
            "id": str(uuid.uuid4()),
            "user_id": user_id,
            "product_name": product_name,
            "category": category_name,
            "amount": float(amount) if amount != "unknown" else None,
            "payment_id": payment_uuid,
            "status": "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è" if payment_method != "BALANCE" else "–í—ã–ø–æ–ª–Ω–µ–Ω",
            "city": handlers.shared_context.user_context[user_id].get("selected_city"),
            "district": handlers.shared_context.user_context[user_id].get("selected_district"),
            "crypto_amount": crypto_amount,
            "product_id": int(product_id) if product_id else None,
        }

        if payment_method == "BALANCE":
            new_order["paid_products_table"] = handlers.shared_context.user_context[user_id].get("paid_products_table")

        add_order(new_order)
        logging.info(
            f"{log_id} - payment_handler.py - {'paid_handler' if payment_method != 'BALANCE' else 'paid_balance_handler'}: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ—Ä–¥–µ—Ä {new_order} –¥–ª—è –æ–ø–ª–∞—Ç—ã")

        if payment_method != "BALANCE":
            text = (
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n\n–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} \n\n"
                f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º –æ—Ç –≤–∞—Å –æ–ø–ª–∞—Ç—É, –≤–∞–º –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò, –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω –∑–∞–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä."
                f"\n\nEnglish: ‚úÖ Thank you for your order!\n\n\nAmount to pay: {amount} \n\n"
                f"As soon as we receive your payment, your order will be issued AUTOMATICALLY."
            )

            await message.answer(
                text,
                reply_markup = main_menu_keyboard()
            )

            user_obj = await bot.get_chat(user_id)
            username = user_obj.username if user_obj.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'
            try:
                 await send_order_notification(
                    bot=bot,
                    user_id=user_id,
                    log_id=log_id,
                    username=username,
                    product_name=product_name,
                    category_name=category_name,
                    amount=amount,
                    order_id=new_order.get("id"),
                    status="–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                    payment_method=payment_method,
                    wallet_address="–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω",
                    order_text=text,
                    order_media=None
                )
            except Exception as e:
                  logging.error(f"payment_handler.py - _create_and_process_order: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

        if payment_method == "USDT_TRC20":
            start_usdt_trc20_payment_check(message, bot, new_order)
        elif payment_method == "USDT_BEP20":
            start_usdt_bep20_payment_check(message, bot, new_order)
        elif payment_method == "BITCOIN":
            start_btc_payment_check(message, bot, new_order)
        elif payment_method == "ETH":
            start_payment_check_eth(message, bot, new_order)
        elif payment_method == "BALANCE":
             await process_bot_balance_purchase(message, bot, new_order)
        elif payment_method == "RUB":
             start_btc_payment_check(message, bot, new_order)

    @dp.message(lambda message: message.text == "–û–ø–ª–∞—Ç–∏–ª / Paid")
    async def paid_handler(message: Message, bot: Bot):
       user_id = message.from_user.id
       payment_method = handlers.shared_context.user_context[user_id].get("payment_method")

       if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context and handlers.shared_context.user_context[user_id].get("payment_status") == "pending":
            logging.info(f"payment_handler.py - paid_handler: payment_status is pending - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –û–ü–õ–ê–¢–ò–õ")
            await bot.send_message(message.chat.id, "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑. \n\n You already have an incomplete order")
            return
       await _create_and_process_order(message, bot, payment_method)

    @dp.message(lambda message: message.text == "–û–ø–ª–∞—Ç–∏—Ç—å / Pay")
    async def paid_balance_handler(message: Message, bot: Bot):
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        amount = handlers.shared_context.user_context[user_id].get("amount")
        user_balance = Decimal(str(get_user_balance(user_id)))

        if user_balance is None or user_balance < Decimal(str(amount)):
            logging.warning(
                f"{log_id} - payment_handler.py - paid_balance_handler: User {user_id} - –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.")
            await message.answer("–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. \n\n Error: Insufficient funds on your balance.")
            return

        new_balance = user_balance - Decimal(str(amount))
        set_user_balance(user_id, float(new_balance))
        logging.info(
            f"{log_id} - payment_handler.py - paid_balance_handler: User {user_id} - –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω, –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}."
        )

        await _create_and_process_order(message, bot, "BALANCE")

    @dp.message(lambda message: message.text == "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è / Cancel")
    async def cancel_payment_handler(message: Message):
        user_id = message.from_user.id
        if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context:
            task = handlers.shared_context.user_context[user_id].get("payment_task")
            if task:
                task.cancel()
                logging.info(f"payment_handler.py - cancel_payment_handler: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            handlers.shared_context.user_context[user_id] = {}
            logging.info(f"payment_handler.py - cancel_payment_handler: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω.")

        await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. \n\n You have returned to the main menu.", reply_markup=ReplyKeyboardRemove())
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é: \n\n Welcome! Select an action from the menu:", reply_markup=main_menu_keyboard())

    @dp.message(lambda message: message.text == "–°–ê–ü–ü–û–†–¢ / SUPPORT")
    async def open_support_chat_handler(message: Message, bot: Bot):
        support_chat_link = "https://t.me/thai_hub_supp"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç / Go to chat", url=support_chat_link)]
        ])

        await message.answer("–î–ª—è —Å–≤—è–∑–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ: \n\n To contact support, click the button below:", reply_markup=keyboard)

    async def show_product_with_location_handler(message: Message, bot: Bot):
        user_id = message.from_user.id
        log_id = uuid.uuid4()
        logging.info(f"{log_id} - payment_handler.py - show_product_with_location_handler: User {user_id}")

        user_context = handlers.shared_context.user_context.get(user_id, {})
        selected_product_id = user_context.get("selected_product_id")
        selected_city = user_context.get("selected_city")
        selected_district = user_context.get("selected_district")
        product_name = user_context.get("product_name")
        logging.info(
            f"{log_id} - payment_handler.py - show_product_with_location_handler: product_name: {product_name}, city: {selected_city}, district: {selected_district}")

        paid_products_table_names = [
            "gr_1_paid_products",
            "gr_2_paid_products",
            "gr_5_paid_products",
            "gr_10_paid_products",
            "item_1_paid_products",
            "item_2_paid_products",
            "item_5_paid_products",
            "item_10_paid_products",
            "item_20_paid_products",
            "item_50_paid_products",
        ]
        for table_name in paid_products_table_names:
            location_info = get_paid_product_by_location(product_name, selected_city, selected_district, table_name)
            if location_info:
                logging.info(
                    f"{log_id} - payment_handler.py - show_product_with_location_handler: –ù–∞–π–¥–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü–µ {table_name},  {location_info}"
                )

                handlers.shared_context.user_context[user_id]["selected_table"] = table_name
                handlers.shared_context.user_context[user_id]["selected_instruction"] = location_info.get("instruction")
                handlers.shared_context.user_context[user_id]["selected_images"] = location_info.get("images")

                await bot.send_message(
                    user_id,
                    f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: <code>{location_info.get('instruction')}</code>",
                    reply_markup=payment_keyboard,
                    parse_mode='HTML'
                )
                return

        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ. \n\n Sorry, could not find the product in the specified area.",
            reply_markup=main_menu_keyboard()
        )

async def process_bot_balance_purchase(message: types.Message, bot: Bot, order: dict):
    user_id = message.from_user.id
    log_id = uuid.uuid4()
    product_name = order.get("product_name")
    order_id = order.get("id")
    category_name = order.get("category")
    product_price = Decimal(str(order.get("amount")))

    logging.info(
        f"{log_id} - payment_handler.py - process_bot_balance_purchase: User {user_id} –æ–ø–ª–∞—Ç–∏–ª —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞, –∑–∞–∫–∞–∑: {order_id}"
    )

    user_city = order.get("city")
    user_district = order.get("district")
    user_obj = await bot.get_chat(user_id)
    username = user_obj.username if user_obj.username else '–Ω–µ—Ç —é–∑–µ—Ä–Ω–µ–π–º–∞'

    location_infos = get_location_info_from_paid_products(product_name, user_city, user_district)
    if not location_infos:
        logging.warning(
            f"{log_id} - payment_handler.py - process_bot_balance_purchase: –¢–æ–≤–∞—Ä '{product_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ paid_products."
        )
        text = (
            f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –ó–∞–∫–∞–∑ ‚Ññ{order_id}\n\n"
            f"–¢–æ–≤–∞—Ä: {product_name}\n\n"
            f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
            f"\n\nEnglish: ‚úÖ Payment confirmed! Order ‚Ññ{order_id}\n\n"
            f"Product: {product_name}\n\n"
            f"Instruction: Contact admin."
        )
        sent_message = await bot.send_message(chat_id=user_id, text=text)

        await send_order_notification(
            bot=bot,
            user_id=user_id,
            log_id=log_id,
            username=username,
            product_name=product_name,
            category_name=category_name,
            amount=product_price,
            order_id=order_id,
            status="–í—ã–ø–æ–ª–Ω–µ–Ω",
            payment_method="BALANCE",
            wallet_address="–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞",
            order_text=sent_message.text if sent_message else text,
            order_media=None
        )

        return

    location_info = location_infos[0]
    logging.info(
        f"{log_id} - payment_handler.py - process_bot_balance_purchase: –õ–æ–∫–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: {location_info}"
    )
    instruction_text = location_info.get('instruction') if location_info.get("instruction") else "–ù–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ / No instruction"

    text = (
        f"üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: {product_price}\n"
        f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω —Å –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞.\n\n"
        f"üìç –õ–æ–∫–∞—Ü–∏—è: {user_city}, {user_district}\n"
        f"üó∫Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: <code>{instruction_text}</code>"
        f"\n\nEnglish: üéâ Thank you for your purchase!\n"
        f"üí∞ Paid amount: {product_price}\n"
        f"‚úÖ Your order has been successfully paid with your bot balance.\n\n"
        f"üìç Location: {user_city}, {user_district}\n"
        f"üó∫Ô∏è Instructions: <code>{instruction_text}</code>"
    )

    order_text = (
            f"üí∞ –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞!\n"
            f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{username} (ID: {user_id})\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name}\n"
            f"üíµ –°—É–º–º–∞: {product_price} USD\n"
            f"üîó –ê–¥—Ä–µ—Å: –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞\n\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {user_city}, {user_district}\n"
            f"üó∫Ô∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instruction_text}"
        )

    media_group = []
    if (
        location_info.get("images")
        and isinstance(location_info.get("images"), str)
    ):
        images = location_info.get("images").replace("[", "").replace("]", "").replace('"', "").split(", ")
        for image_path in images:
            if image_path:
                full_image_path = os.path.join(os.path.dirname(__file__), "..", image_path.lstrip("\\/"))
                if os.path.exists(full_image_path):
                    media_group.append(types.InputMediaPhoto(media=types.FSInputFile(full_image_path)))
                else:
                    logging.warning(
                        f"{log_id} - payment_handler.py - process_bot_balance_purchase: –§–∞–π–ª {full_image_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"
                    )

    try:
        if media_group:
         await bot.send_media_group(chat_id=user_id, media=media_group)
        await bot.send_message(chat_id=user_id, text=text, parse_mode="HTML")

    except Exception as e:
        logging.error(
            f"{log_id} - payment_handler.py - process_bot_balance_purchase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}"
        )

    try:
        move_paid_product_to_sold_products(product_name, user_city, user_district, user_id, location_info.get('id'), location_info.get('table_name'))
        logging.info(
            f"{log_id} - payment_handler.py - process_bot_balance_purchase: –¢–æ–≤–∞—Ä '{product_name}' –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ sold_products"
        )
    except Exception as e:
        logging.error(
            f"{log_id} - payment_handler.py - process_bot_balance_purchase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ sold_products: {e}"
        )

        logging.info(
        f"{log_id} - payment_handler.py - process_bot_balance_purchase: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É sold_products: {product_name} - {user_city}, {user_district}"
    )

    try:
        user_data = get_user(user_id)
        if user_data and user_data[2] is not None:
            referrer_id = user_data[2]
            bonus_amount = (product_price * Decimal("0.03")).quantize(Decimal("0.00"))
            referrer_data = get_user(referrer_id)
            if referrer_data:
                new_referrer_balance = Decimal(str(referrer_data[3])) + bonus_amount
                add_to_user_balance(referrer_id, float(new_referrer_balance))
                update_referral_purchases_amount(
                    referrer_id, float(product_price)
                )
                update_referral_purchases_count_column(referrer_id, user_id)

                logging.info(
                    f"{log_id} - payment_handler.py - process_bot_balance_purchase: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id} –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å {bonus_amount}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å {new_referrer_balance}"
                )

                try:
                    await bot.send_message(
                        chat_id=referrer_id,
                        text=(
                            f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª —Å–æ–≤–µ—Ä—à–∏–ª –ø–æ–∫—É–ø–∫—É!\n\n"
                            f"üí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ {bonus_amount:.2f} USD.\n"
                            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_referrer_balance:.2f} USD."
                            f"\n\nEnglish: üéâ Your referral has made a purchase!\n\n"
                            f"üí∞ You received a bonus of {bonus_amount:.2f} USD.\n"
                            f"üí∞ Your current balance: {new_referrer_balance:.2f} USD."
                        ),
                    )
                    logging.info(
                        f"{log_id} - payment_handler.py - process_bot_balance_purchase: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º –±–æ–Ω—É—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {referrer_id}."
                    )
                except Exception as e:
                    logging.error(
                        f"{log_id} - payment_handler.py - process_bot_balance_purchase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É {referrer_id}: {e}"
                    )
            else:
                logging.warning(
                    f"{log_id} - payment_handler.py - process_bot_balance_purchase: –†–µ—Ñ–µ—Ä–µ—Ä —Å ID {referrer_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        logging.error(
            f"{log_id} - payment_handler.py - process_bot_balance_purchase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}"
        )

    try:
        await send_order_notification(
            bot=bot,
            user_id=user_id,
            log_id=log_id,
            username=username,
            product_name=product_name,
            category_name=category_name,
            amount=product_price,
            order_id=order_id,
            status="–í—ã–ø–æ–ª–Ω–µ–Ω",
            payment_method="BALANCE",
            wallet_address="–ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞",
            order_text=order_text,
            order_media=media_group
        )
    except Exception as e:
        logging.error(f"{log_id} - payment_handler.py - process_bot_balance_purchase: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

    if handlers.shared_context.user_context and user_id in handlers.shared_context.user_context:
        task = handlers.shared_context.user_context[user_id].get("payment_task")
        if task:
            task.cancel()
            logging.info(
                f"{log_id} - payment_handler.py - process_bot_balance_purchase: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {order.get('payment_id')} –æ—Ç–º–µ–Ω–µ–Ω–∞."
            )
        handlers.shared_context.user_context[user_id] = {}
        logging.info(
            f"{log_id} - payment_handler.py - process_bot_balance_purchase: –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω."
        )

    await bot.send_message(chat_id=user_id, text="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. \n\n You have returned to the main menu.", reply_markup=main_menu_keyboard())

def register_payment_handlers(dp: Dispatcher):
    register_payment_handler(dp)