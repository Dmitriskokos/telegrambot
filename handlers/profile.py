import logging
import os
import random
import uuid
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup
from database import get_user_balance, get_user_sold_products, get_wallet_address
from handlers.shared_context import user_context
from handlers.topupbot import register_topup_handler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log',
    filemode='a'
)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —Ü–µ–Ω—Ç–æ–≤
def generate_random_cents():
    return random.randint(1, 99)

IMAGE_DIR = "data/images/"

async def _send_profile_info(message: types.Message, bot: Bot, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ—Ñ–∏–ª–µ."""
    log_id = uuid.uuid4()
    balance = get_user_balance(user_id)
    logging.info(f"{log_id} - profile.py - _send_profile_info: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –ë–∞–ª–∞–Ω—Å: {balance} –∏–∑ –ë–î")  # User {user_id} - Balance: {balance} from DB

    user_orders = get_user_sold_products(user_id)
    total_purchases_amount = 0.0

    for order in user_orders:
            total_purchases_amount += order.get("price", 0)

    num_orders = len(user_orders)
    average_check = total_purchases_amount / num_orders if num_orders > 0 else 0

    logging.info(f"{log_id} - profile.py - _send_profile_info: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} - –ó–∞–∫–∞–∑–æ–≤: {num_orders}, –í—Å–µ–≥–æ: {total_purchases_amount}, –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {average_check}")  # User {user_id} - Orders: {num_orders}, Total: {total_purchases_amount}, Average check: {average_check}

    user_group = "–ù–∞—á–∞–ª—å–Ω—ã–π"

    text = (
        "üá∑üá∫<b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"–ù–∞—à —Å–µ—Ä–≤–∏—Å: <a href='https://thaihub.cc'>https://thaihub.cc</a>\n"
        f"–í–∞—à ID: <code>{user_id}</code>\n"
        f"–°—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ —Å—á–µ—Ç—É: {balance:.2f} USD\n"
        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {num_orders}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: {total_purchases_amount:.2f} USD\n"
        f"–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫: {average_check:.2f} USD\n"
        f"–£—Ä–æ–≤–µ–Ω—å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {user_group}\n\n"
        "_______________________________\n\n"
        "üá∫üá∏<b>Personal account</b>\n\n"
        f"Our service: <a href='https://thaihub.cc'>https://thaihub.cc</a>\n"
        f"Your ID: <code>{user_id}</code>\n"
        f"Funds on account: {balance:.2f} USD\n"
        f"Number of purchases: {num_orders}\n"
        f"Total amount of purchases: {total_purchases_amount:.2f} USD\n"
        f"Average cost of purchases: {average_check:.2f} USD\n"
        f"Loyalty level: {user_group}"
    )

    keyboard = InlineKeyboardBuilder()
    keyboard.row(types.InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç / Top up account", callback_data="request_funds"))
    keyboard.row(types.InlineKeyboardButton(text="–ü–æ–∫—É–ø–∫–∏ / My Orders", callback_data="my_orders_inline"))
    keyboard.row(types.InlineKeyboardButton(text="–†–µ—Ñ–µ—Ä–∞–ª–∫–∞ / Ref", callback_data="referral_inline"))

    image_path = os.path.join(IMAGE_DIR, "111.jpg")
    try:
       if os.path.exists(image_path):
           image = FSInputFile(image_path)
           await message.answer_photo(photo=image, caption=text, parse_mode="HTML", reply_markup=keyboard.as_markup(), disable_web_page_preview=True)
       else:
           await message.answer(text, parse_mode="HTML", reply_markup=keyboard.as_markup(), disable_web_page_preview=True)
    except Exception as e:
        logging.error(f"{log_id} - profile.py - _send_profile_info: ERROR: Error sending image: {e}", exc_info=True)  # Error sending image: {e}
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}\n\n{text}",parse_mode="HTML", reply_markup=keyboard.as_markup(), disable_web_page_preview=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def user_profile_handler(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - profile.py - user_profile_handler: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ") # User {user_id} requested profile information
    try:
        await _send_profile_info(message, bot, user_id)
    except Exception as e:
        logging.error(f"{log_id} - profile.py - user_profile_handler: ERROR:  {e}", exc_info=True)  # {e}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç", –≤—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def funds_request_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - profile.py - funds_request_handler: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å'") # User {user_id} pressed 'Top up balance'

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
    await callback.message.delete()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫ —Å —Å—É–º–º–∞–º–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    keyboard = InlineKeyboardBuilder()
    amounts = [100, 150, 200, 250, 300, 350, 400, 450]

    for i in range(0, len(amounts), 2):
        row_buttons = []
        row_buttons.append(types.InlineKeyboardButton(
            text=f"{amounts[i]} USDT",
            callback_data=f"select_amount_{i}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ ID
        ))
        if i + 1 < len(amounts):
            row_buttons.append(types.InlineKeyboardButton(
                text=f"{amounts[i+1]} USDT",
                callback_data=f"select_amount_{i+1}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –≤–º–µ—Å—Ç–æ ID
            ))
        keyboard.row(*row_buttons)

    keyboard.row(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å / Cancel request", callback_data="cancel_funds"))

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
    text = (
        f"<b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ USD) \n\n"
        f"<b>–ö—Ä–∏–ø—Ç–æ –∫–æ—à–µ–ª–µ–∫</b>\n\n"
        f"–≠—Ç–æ –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç –í–∞—à —Å—á–µ—Ç.\n\n"
        f"–ü–µ—Ä–µ–¥ –ø–µ—Ä–µ–≤–æ–¥–æ–º, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å (–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –Ω–∏–∂–µ —Å—É–º–º—ã)\n\n"
        f"<b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å:</b>\n"
        f"1 USDT = 1 USD\n\n"
        "English:\n"
         f"<b>Top up balance</b>\n\n"
        f"Select the top-up amount (in USD)\n\n"
        f"<b>Crypto wallet</b>\n\n"
        f"This is your personal wallet for topping up your balance. When funds are received at this address, the system will automatically top up your account.\n\n"
        f"Before transferring, click on the amount you want to top up (it is possible to top up only the amounts below)\n\n"
        f"<b>Current rate:</b>\n"
        f"1 USDT = 1 USD"
    )

    await callback.message.answer(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")

    # –û—Ç–≤–µ—Ç –Ω–∞ callback –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ—Ç Telegram
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
async def cancel_funds_handler(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - profile.py - cancel_funds_handler: INFO: User {user_id} –Ω–∞–∂–∞–ª '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å'")  # User {user_id} pressed 'Cancel request'

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await callback.message.delete()

    await _send_profile_info(callback.message, bot, user_id)

    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
async def select_amount_handler(callback: types.CallbackQuery, bot:Bot):
  user_id = callback.from_user.id
  log_id = uuid.uuid4()
  amount_index = int(callback.data.split("_")[-1])

  logging.info(f"{log_id} - profile.py - select_amount_handler: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∏–Ω–¥–µ–∫—Å: {amount_index}")  # User {user_id} selected the top-up amount, index: {amount_index}

  amounts = [100, 150, 200, 250, 300, 350, 400, 450]

  if amount_index < 0 or amount_index >= len(amounts):
        logging.warning(f"{log_id} - profile.py - select_amount_handler: WARNING: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {amount_index}")  # User {user_id} selected a non-existent index: {amount_index}
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. / Error: Invalid top-up amount.")
        return

  selected_amount = amounts[amount_index]

  # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ USDT_TRC20 –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  tron_wallet_address = get_wallet_address("USDT_TRC20")

  if not tron_wallet_address:
    logging.error(f"{log_id} - profile.py - select_amount_handler: ERROR: USDT_TRC20 wallet address not found in database")  # USDT_TRC20 wallet address not found in database
    await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. / Error: Could not get the wallet address for top up.")
    return

  cents = generate_random_cents()
  total_amount = f"{selected_amount}.{cents:02}"

  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏, –≤–∫–ª—é—á–∞—è –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
  if user_id not in user_context:
        user_context[user_id] = {}
  user_context[user_id]["pending_topup"] = {
       "amount_with_cents": total_amount,
        "amount_without_cents": selected_amount,
        "wallet_address": tron_wallet_address
  }


  keyboard = InlineKeyboardBuilder()
  keyboard.row(
      types.InlineKeyboardButton(
          text="USDT TRC 20",
          callback_data=f"topup_confirm_{amount_index}"
      )
  )
  keyboard.row(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å / Cancel request", callback_data="cancel_funds"))

  text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: \n\n Select payment method:"
  await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
  await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã USDT TRC20
async def process_topup_confirmation(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    log_id = uuid.uuid4()
    amount_index = int(callback.data.split("_")[-1])

    amounts = [100, 150, 200, 250, 300, 350, 400, 450]

    if amount_index < 0 or amount_index >= len(amounts):
        logging.warning(f"{log_id} - profile.py - process_topup_confirmation: WARNING: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å: {amount_index}")  # User {user_id} selected a non-existent index: {amount_index}
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. / Error: Invalid top-up amount.")
        return

    selected_amount = amounts[amount_index]

    # Retrieve total_amount from user_context
    topup_info = user_context.get(user_id, {}).get("pending_topup", {})
    total_amount_str = topup_info.get("amount_with_cents")
    if not total_amount_str:
        logging.error(f"{log_id} - profile.py - process_topup_confirmation: ERROR: amount_with_cents not found in user_context for user {user_id}")
        await callback.answer("–û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n\n Error: Top up amount not found, please try again.", show_alert=True)
        return
    total_amount = total_amount_str # Use the retrieved total_amount

    logging.info(f"{log_id} - profile.py - process_topup_confirmation: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª USDT TRC20, —Å—É–º–º–∞: {total_amount}")  # User {user_id} selected USDT TRC20, amount: {total_amount}

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tron_wallet_address = user_context.get(user_id, {}).get("pending_topup", {}).get("wallet_address")
    if not tron_wallet_address:
         logging.error(f"{log_id} - profile.py - process_topup_confirmation: ERROR: Wallet address not found in context for user {user_id}")  # Wallet address not found in context for user {user_id}
         await callback.answer("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. / Error: Could not get the wallet address for top up.")
         return

    keyboard = InlineKeyboardBuilder()
    keyboard.row(
        types.InlineKeyboardButton(
            text="–û–ø–ª–∞—Ç–∏–ª / Paid",
            callback_data="payment_made"
        )
    )
    keyboard.row(types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å / Cancel request", callback_data="cancel_funds"))

    text = (
        f"üòé –í—ã –≤—ã–±—Ä–∞–ª–∏ USDT TRC 20\n\n"
        f"üíµ –ö–æ—à–µ–ª–µ–∫ –¥–ª—è –æ–ø–ª–∞—Ç—ã: <code>{tron_wallet_address}</code>\n\n"
        f"‚úçÔ∏è –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount} USDT\n\n"
        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω–æ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã—à–µ –∞–¥—Ä–µ—Å.\n\n"
        "English:\n"
        f"üòé You have selected USDT TRC 20\n\n"
        f"üíµ Wallet for payment: <code>{tron_wallet_address}</code>\n\n"
        f"‚úçÔ∏è Amount to pay: {total_amount} USDT\n\n"
        f"Please send the exact amount to the address indicated above."
    )

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup(), parse_mode="HTML")
    await callback.answer()

async def back_to_profile_handler(callback: types.CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥", –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    user_id = callback.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - profile.py - back_to_profile_handler: INFO: User {user_id} pressed '–ù–∞–∑–∞–¥'") # User {user_id} pressed 'Back'

    await callback.message.delete() # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    await _send_profile_info(callback.message, bot, user_id)

    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_profile_handler(dp: Dispatcher, bot: Bot):
    dp.message.register(user_profile_handler, lambda message: message.text == "–ü—Ä–æ—Ñ–∏–ª—å / Account")
    dp.callback_query.register(funds_request_handler, lambda callback: callback.data == "request_funds",)
    dp.callback_query.register(cancel_funds_handler, lambda callback: callback.data == "cancel_funds")
    dp.callback_query.register(select_amount_handler, lambda callback: callback.data.startswith("select_amount_"), )
    dp.callback_query.register(process_topup_confirmation, lambda callback: callback.data.startswith("topup_confirm_"))
    dp.callback_query.register(back_to_profile_handler, lambda callback: callback.data == "back_to_profile")
    register_topup_handler(dp, bot)