import logging
import asyncio
import uuid
from decimal import Decimal
from datetime import datetime, timedelta
import time
from aiogram import Bot, Dispatcher, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiohttp
from database import get_user_balance, add_to_user_balance, get_wallet_address
from handlers.shared_context import user_context
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log',
    filemode='a'
)

CHECK_INTERVAL = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö - –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ 60 —Å–µ–∫—É–Ω–¥
PAYMENT_CHECK_TIMEOUT = 30 * 60 # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–æ

async def get_transactions(tron_wallet_address, limit=20, only_confirmed=True, start_timestamp=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Trongrid API."""
    tron_grid_url = f"https://api.trongrid.io/v1/accounts/{tron_wallet_address}/transactions/trc20"
    params = {
        'only_confirmed': str(only_confirmed).lower(),
        'limit': limit,
        'only_to': str(True).lower()
    }
    if start_timestamp:
        params['min_timestamp'] = int(start_timestamp.timestamp() * 1000)

    headers = {"accept": "application/json"}

    transactions = []
    try:
        async with aiohttp.ClientSession() as session:
            response = await session.get(tron_grid_url, params=params, headers=headers, timeout=10)
            response.raise_for_status()
            response_json = await response.json()
            transactions = response_json.get('data', [])

            while 'fingerprint' in response_json.get('meta', {}):
                params['fingerprint'] = response_json['meta']['fingerprint']
                response = await session.get(tron_grid_url, params=params, headers=headers, timeout=10)
                response.raise_for_status()
                response_json = await response.json()
                transactions.extend(response_json.get('data', []))
                if len(transactions) >= limit:
                    break

    except aiohttp.ClientError as e:
        logging.error(f"topupbot - get_transactions: ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Trongrid API: {e}", exc_info=True)  # Error when requesting to Trongrid API: {e} # –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª–æ–≥–∞—Ö
    except Exception as e:
         logging.error(f"topupbot - get_transactions: ERROR: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)  # An unexpected error occurred: {e} # –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ª–æ–≥–∞—Ö
    return transactions

async def check_topup_payment(message: types.Message, bot: Bot, topup_data, last_hour: datetime):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã."""
    log_id = uuid.uuid4()
    topup_id = topup_data.get("topup_id")
    amount_without_cents = Decimal(str(topup_data.get("amount_without_cents")))  # –ø–µ—Ä–µ–¥–∞–µ–º –≤ Decimal
    user_id = topup_data.get("user_id")

    logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {topup_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å —Å—É–º–º–æ–π {amount_without_cents}") # Start payment verification {topup_id} for user {user_id}, with amount {amount_without_cents}
    start_time = time.time()
    tron_wallet_address = get_wallet_address('USDT_TRC20') # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞ –≤–Ω–µ —Ü–∏–∫–ª–∞ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    if not tron_wallet_address:
        logging.error(f"{log_id} - topupbot - check_topup_payment: ERROR: USDT_TRC20 wallet address not found in database")  # USDT_TRC20 wallet address not found in database
        await bot.send_message(user_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. \n\n ‚ùå Error when topping up balance, please try again later.")
        return False

    while time.time() - start_time < PAYMENT_CHECK_TIMEOUT:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º 30 –º–∏–Ω—É—Ç - –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ PAYMENT_CHECK_TIMEOUT
        try:
            transactions = await get_transactions(tron_wallet_address, start_timestamp=last_hour)  # –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ get_topup_transactions -> get_transactions # –ø–µ—Ä–µ–¥–∞–µ–º –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
            logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")  # Received transactions: {len(transactions)}
            if not transactions:
                logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")  # No transactions to check
                await asyncio.sleep(CHECK_INTERVAL)
                continue

            for tr in transactions:
                token_symbol = tr.get('token_info', {}).get('symbol')
                logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: symbol={token_symbol}") # Checking transaction: symbol={token_symbol}
                if token_symbol == "USDT":
                    value = tr.get('value')
                    decimals = tr.get('token_info', {}).get('decimals')
                    if value is None or decimals is None:
                        logging.warning(
                            f"{log_id} - topupbot - check_topup_payment: WARNING: –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è {tr}. –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã—Ö: value –∏–ª–∏ decimals")  # Skipped transaction {tr}. Missing data: value or decimals
                        continue
                    try:
                        value = Decimal(value)
                        decimals = int(decimals)
                        amount_received = value / (10 ** decimals)
                    except (ValueError, TypeError) as e:
                        logging.error(
                            f"{log_id} - topupbot - check_topup_payment: ERROR: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ value –∏–ª–∏ decimals: {e}, transaction: {tr}", exc_info=True)  # Error when converting value or decimals: {e}, transaction: {tr}
                        continue

                    to_address = tr.get('to')
                    from_address = tr.get('from')

                    logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ {topup_id}: –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ = {amount_without_cents}, –ü–æ–ª—É—á–µ–Ω–æ = {amount_received}, –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è = {to_address}, –û–∂–∏–¥–∞–µ–º—ã–π –∞–¥—Ä–µ—Å = {tron_wallet_address}") # Payment verification {topup_id}: Amount to pay = {amount_without_cents}, Received = {amount_received}, Recipient address = {to_address}, Expected address = {tron_wallet_address}

                    if amount_received == amount_without_cents:
                        if to_address == tron_wallet_address:
                            logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É {amount_received} USDT –æ—Ç {from_address} –Ω–∞ –∞–¥—Ä–µ—Å {to_address} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")  # Payment of {amount_received} USDT from {from_address} to address {to_address} confirmed.
                            # –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                            add_to_user_balance(user_id, float(amount_without_cents))
                            if user_id in user_context:
                                user_context[user_id]["balance"] = get_user_balance(user_id)  # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                            await bot.send_message(user_id, f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount_without_cents:.2f} USDT. \n\n üí∞ Your balance has been topped up by {amount_without_cents:.2f} USDT.")
                            return True  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
                        else:
                            logging.info(
                                f"{log_id} - topupbot - check_topup_payment: INFO: –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {to_address} –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º –∞–¥—Ä–µ—Å–æ–º {tron_wallet_address}.")  # Transaction recipient address {to_address} does not match the expected address {tron_wallet_address}.
                    else:
                        logging.info(
                            f"{log_id} - topupbot - check_topup_payment: INFO: –°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {amount_received} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–π —Å—É–º–º–µ {amount_without_cents} –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {topup_id}.")  # Transaction amount {amount_received} does not match the expected amount {amount_without_cents} for payment {topup_id}.
                else:
                    logging.info(
                        f"{log_id} - topupbot - check_topup_payment: INFO: –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {token_symbol} –Ω–µ —Ä–∞–≤–µ–Ω USDT, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")  # Transaction token symbol {token_symbol} is not equal to USDT, skipping
        except Exception as e:
            logging.error(f"{log_id} - topupbot - check_topup_payment: ERROR: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}", exc_info=True)  # Unknown error in payment verification loop: {e}
        await asyncio.sleep(CHECK_INTERVAL)
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 30 –º–∏–Ω—É—Ç –∏ –æ–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ 30 –º–∏–Ω—É—Ç
    logging.info(f"{log_id} - topupbot - check_topup_payment: INFO: –ü–ª–∞—Ç–µ–∂ {topup_id} –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –º–∏–Ω—É—Ç.")  # Payment {topup_id} was not received within 30 minutes.
    await bot.send_message(user_id,
                           "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç –≤–∞—Å –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –±–æ—Ç–∞ –Ω–µ –±—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. \n\n ‚ùå Your payment has not been received, topping up the bot balance was not completed.")
    if user_id in user_context and "pending_topup" in user_context[user_id]:
        del user_context[user_id]["pending_topup"]  # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞
    return False

async def start_topup_check(message, bot, topup_data):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è."""
    log_id = uuid.uuid4()
    topup_id = topup_data.get("topup_id")
    amount_without_cents = topup_data.get("amount_without_cents")
    user_id = topup_data.get("user_id")
    logging.info(
        f"{log_id} - topupbot - start_topup_check: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, Topup ID: {topup_id}, —Å—É–º–º–∞ –±–µ–∑ —Ü–µ–Ω—Ç–æ–≤ {amount_without_cents}") # User {user_id}, Topup ID: {topup_id}, amount without cents {amount_without_cents}

    now = datetime.now()
    last_hour = now - timedelta(hours=1)
    asyncio.create_task(check_topup_payment(message, bot, topup_data, last_hour))

async def topup_payment_made_handler(callback: types.CallbackQuery, bot:Bot):
    user_id = callback.from_user.id
    log_id = uuid.uuid4()
    logging.info(f"{log_id} - topupbot - topup_payment_made_handler: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–û–ø–ª–∞—Ç–∏–ª'")

    if user_id not in user_context or "pending_topup" not in user_context[user_id]:
        logging.warning(
            f"{log_id} - topupbot - topup_payment_made_handler: WARNING: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await callback.answer("–û—à–∏–±–∫–∞: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n\n Error: Top up information not found, please try again.", show_alert=True)
        return

    topup_info = user_context[user_id]["pending_topup"]
    total_amount_str = topup_info.get("amount_with_cents") # Get the amount_with_cents that was already generated
    if not total_amount_str:
        logging.error(f"{log_id} - topupbot - topup_payment_made_handler: ERROR: amount_with_cents not found in user_context")
        await callback.answer("–û—à–∏–±–∫–∞: –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n\n Error: Top up amount not found, please try again.", show_alert=True)
        return

    try:
        total_amount = Decimal(str(total_amount_str)) # Convert to Decimal
    except Exception as e:
        logging.error(f"{log_id} - topupbot - topup_payment_made_handler: ERROR: Could not convert amount_with_cents to Decimal: {e}", exc_info=True)
        await callback.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ \n\n Error: Invalid top up amount format, please try again.", show_alert=True)
        return


    amount_without_cents = total_amount # Use the amount_with_cents as amount_without_cents for check - it's actually the total amount now.
    logging.info(
        f"{log_id} - topupbot - topup_payment_made_handler: INFO: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount}")


    await callback.answer("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ \n\n Please wait for payment confirmation")

    await callback.message.edit_text(
        "‚è≥ –ú—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à –ø–ª–∞—Ç–µ–∂, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –¥–µ–Ω—å–≥–∏ –ø–æ—Å—Ç—É–ø—è—Ç - –≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω!\n\n–ï—Å–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 30-—Ç–∏ –º–∏–Ω—É—Ç –º—ã –Ω–µ –ø–æ–ª—É—á–∏–º –æ—Ç –≤–∞—Å –æ–ø–ª–∞—Ç—É, –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω.\n\n" # –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ 30 –º–∏–Ω—É—Ç
        "English:\n"
        "‚è≥ We are verifying your payment, as soon as the money arrives, your balance will be replenished!\n\n"
        "If we do not receive payment from you within 30 minutes, the payment will be canceled.", # –ò–ó–ú–ï–ù–ï–ù–û –Ω–∞ 30 –º–∏–Ω—É—Ç
        parse_mode="HTML"
    )

    await start_topup_check(callback.message, bot, {
        "topup_id": log_id,
        "amount_without_cents": total_amount,  # –ø–µ—Ä–µ–¥–∞–µ–º Decimal - now total_amount
        "user_id": user_id
    })

def register_topup_handler(dp: Dispatcher, bot: Bot): # –î–æ–±–∞–≤–∏–ª bot
   dp.callback_query.register(
        topup_payment_made_handler,
        lambda callback: callback.data == "payment_made"
    )