import logging
import uuid
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, InputMediaVideo, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.storage.memory import MemoryStorage
import asyncio
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from database import DatabaseManager, add_user, get_user, update_referred_by, delete_user, get_all_users, update_username_query, add_referral
import os
from aiogram.types import FSInputFile
from aiogram.fsm.context import FSMContext
from logging import StreamHandler
from dotenv import load_dotenv
from keyboards import main_menu_keyboard  # –ò–º–ø–æ—Ä—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

load_dotenv()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot.log',
    filemode='a'
)

# –°–æ–∑–¥–∞–µ–º StreamHandler
stream_handler = StreamHandler()
stream_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))  # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
# –î–æ–±–∞–≤–ª—è–µ–º handler –∫ root logger
logging.getLogger().addHandler(stream_handler)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä DatabaseManager
db_manager = DatabaseManager()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
async def delete_message(bot, chat_id, message_id):
    try:
        await bot.delete_message(chat_id, message_id)
    except TelegramBadRequest as e:
        logging.info(f"Ignoring TelegramBadRequest: {e}")
    except Exception as e:
        logging.error(f"Error deleting message: {e}")


# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logging.critical("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit()

# –ü—É—Ç—å –∫ GIF
GIF_PATH = os.getenv("GIF_PATH", "data/images/–∞–∞–∞.mp4")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
def generate_referral_code():
    return str(uuid.uuid4())[:8].upper()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
def generate_referral_link(bot_username, referral_code):
    return f"http://t.me/{bot_username}?start={referral_code}"


async def start_command(message: Message):
    logging.info(f"main.py - start_command: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    user_id = message.from_user.id
    username = message.from_user.username
    logging.info(f"main.py - start_command: User {user_id} started bot with text: {message.text}")

    conn = db_manager.get_connection()
    if not conn:
        logging.error(f"start_command: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        return
    try:
        user_data = get_user(user_id)
        if user_data is None:
            referral_code = generate_referral_code()
            add_user(user_id, referral_code, username=username)
            from handlers import shared_context
            shared_context.user_context[user_id] = {}
            logging.info(f"main.py - start_command: User {user_id} - New user. Added to database. Referal code {referral_code}")
        else:
            if username and user_data[5] != username:
                update_username_query(user_id, username)
                logging.info(f"main.py - start_command: User {user_id} - Updating username to {username}")
            from handlers import shared_context
            shared_context.user_context[user_id] = {}
            logging.info(f"main.py - start_command: User {user_id} - Existing user.")

        if message.text and message.text.startswith("/start "):
            try:
                referral_code = message.text.split(" ")[1]
                logging.info(f"main.py - start_command: User {user_id} - Referral code: {referral_code}")

                all_users = get_all_users()
                for ref_user_id, ref_user_code in all_users:
                    if ref_user_code == referral_code:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —á—å–∏–º-—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º
                        if user_data and user_data[2] is not None:
                            logging.info(f"main.py - start_command: User {user_id} already has a referrer.")
                            break  # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –µ—Å–ª–∏ –Ω–µ—Ç –µ–≥–æ –≤ –±–¥
                        if user_data is None:
                            update_referred_by(user_id, ref_user_id)
                            add_referral(ref_user_id, user_id, username)
                            
                            referrer_data = get_user(ref_user_id)
                            if referrer_data:
                                logging.info(f"main.py - start_command: User {user_id} referred by {ref_user_id}.  Referrer balance {referrer_data[3]}")
                                await bot.send_message(chat_id=ref_user_id,text="–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 3% –æ—Ç —Å—É–º–º—ã –µ–≥–æ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å –±–æ—Ç–∞")
                            else:
                                logging.warning(f"main.py - start_command: User {user_id} referred by {ref_user_id} but referrer not found")

                        break  # –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
            except IndexError:
                logging.warning(f"main.py - start_command: User {user_id} - no referral code found")
    except Exception as e:
         logging.error(f"start_command: –û—à–∏–±–∫–∞ - {e}")
    finally:
       db_manager.release_connection(conn)
    logging.info(f"main.py - start_command: DEBUG: GIF path - {GIF_PATH}")


    welcome_message = (
    "üá∑üá∫<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω THAI.HUB</b>üñ§üß°\n\n"
    "–ë—É–¥–µ–º —Ä–∞–¥—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –í–∞–º –ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–µ—Ä–≤–∏—Å!\n"
    "–ú—ã —Ü–µ–Ω–∏–º –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.\n\n"
    "–ë–æ—Ç –∞–≤—Ç–æ–ø—Ä–æ–¥–∞–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7.\n"
    "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –ø–æ–∫—É–ø–∫–∏, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ, –∏ –∫–æ–º–º—É–Ω–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º.\n"
    "–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—åüíïüáπüá≠\n"
    "_______________________________\n\n"
    "üá∫üá∏<b>Welcome to THAI.HUB store</b>üñ§üß°\n\n"
    "We will be happy to provide you with the best quality and service!\n"
    "We value each and every customer.\n\n"
    "The automated sales bot operates 24/7.\n"
    "Here you can make purchases, earn on the referral program, and communicate with support on all issues.\n"
    "Enjoyüíïüáπüá≠"
)

    try:
        if os.path.exists(GIF_PATH):
            gif = FSInputFile(GIF_PATH)
            await message.answer_animation(animation=gif, caption=welcome_message, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)
        else:
            await message.answer(welcome_message, reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)
            logging.warning(f"main.py - start_command: GIF not found at path: {GIF_PATH}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ GIF: {e}\n\n{welcome_message}", reply_markup=main_menu_keyboard(), parse_mode=ParseMode.HTML)
        logging.error(f"main.py - start_command: Error sending GIF: {e}")


async def cities_from_main_menu_handler(message: Message, bot: Bot, state: FSMContext):
    user_id = message.from_user.id
    logging.info(f"main.py - cities_from_main_menu_handler: User {user_id} pressed '–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'")
    from handlers import shared_context
    if user_id not in shared_context.user_context:
        shared_context.user_context[user_id] = {}
    shared_context.user_context[user_id]["step"] = "cities_list"
    from handlers.cities import cities_handler
    await cities_handler(message, bot, state)

async def our_chat_handler(message: Message, bot: Bot):
    chat_link = "https://t.me/thaihub_chat"
    logging.info(f"main.py - our_chat_handler: User {message.from_user.id} pressed '–ù–∞—à —á–∞—Ç / Our Chat'")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
    message_text = (
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç:\n\n"
        "Click the button below to join our chat:"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –≤ –∫–Ω–æ–ø–∫—É
    button_text = "–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç / Join our Chat"
    
    inline_keyboard = InlineKeyboardMarkup(
         inline_keyboard=[
            [InlineKeyboardButton(text=button_text, url=chat_link)]
         ]
    )
    await message.answer(message_text, reply_markup=inline_keyboard)


async def delete_user_handler(message: Message):
    conn = db_manager.get_connection()
    if not conn:
      logging.error(f"delete_user_handler: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
      return
    try:
      if message.text.startswith("/delete_user "):
        try:
           user_id_to_delete = int(message.text.split(" ")[1])
           delete_user(user_id_to_delete)
           logging.info(f"main.py - delete_user_handler: User {user_id_to_delete} deleted from db by {message.from_user.id}")
           await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id_to_delete} —É–¥–∞–ª–µ–Ω.")
        except (IndexError, ValueError) as e:
            logging.warning(f"main.py - delete_user_handler: Invalid user_id or command: {e}")
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_user <user_id>.")
      else:
            logging.warning(f"main.py - delete_user_handler: Invalid command format")
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /delete_user <user_id>.")
    except Exception as e:
         logging.error(f"delete_user_handler: –û—à–∏–±–∫–∞ - {e}")
    finally:
      db_manager.release_connection(conn)


# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
from handlers.balance import register_balance_handler
from handlers.cities import register_city_handlers
from handlers.categories import register_category_handlers
from handlers.earn import register_earn_handler
from handlers.payment_handler import register_payment_handler
from handlers.profile import register_profile_handler
from handlers.reviews import register_reviews_handler
from handlers.support import register_support_handler
from handlers.job import register_job_handler
from handlers.topupbot import register_topup_handler


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers():
    dp.message.register(start_command, F.text.startswith("/start"))
    dp.message.register(delete_user_handler, F.text.startswith("/delete_user"))
    register_balance_handler(dp, bot)
    register_city_handlers(dp, bot)
    register_earn_handler(dp)
    register_payment_handler(dp)
    register_profile_handler(dp, bot)
    register_reviews_handler(dp)
    register_support_handler(dp, bot)
    register_job_handler(dp)
    register_category_handlers(dp, bot)
    register_topup_handler(dp, bot)
    dp.message.register(cities_from_main_menu_handler, F.text == "–ó–∞–∫–∞–∑–∞—Ç—å / Order")
    dp.message.register(our_chat_handler, F.text == "–ù–∞—à —á–∞—Ç / Our Chat")


async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    # database.initialize_db() # <--- –£–î–ê–õ–Ø–ï–ú
    register_handlers()
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")

    try:
        await dp.start_polling(bot)
    finally:
        # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
        # database.close_db() # <--- –£–î–ê–õ–Ø–ï–ú
       pass


if __name__ == "__main__":
    asyncio.run(main())